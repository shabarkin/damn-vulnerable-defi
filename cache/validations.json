{
  "version": "3.2",
  "log": [
    {
      "GnosisSafe": {
        "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:19",
        "version": {
          "withMetadata": "d6b0f12a5de348d5af3088f6823ec9938f34574f28babd56554ceb0c9e51a71f",
          "withoutMetadata": "835f5dee7dd23a9b929117715bcf0a085540864c3b9b827f117547f2d6fffed1",
          "linkedWithoutMetadata": "835f5dee7dd23a9b929117715bcf0a085540864c3b9b827f117547f2d6fffed1"
        },
        "inherit": [
          "GuardManager",
          "StorageAccessible",
          "FallbackManager",
          "ISignatureValidatorConstants",
          "SecuredTokenTransfer",
          "SignatureDecoder",
          "OwnerManager",
          "ModuleManager",
          "Executor",
          "SelfAuthorized",
          "Singleton",
          "EtherPaymentFallback"
        ],
        "libraries": [
          "GnosisSafeMath"
        ],
        "methods": [
          "()",
          "setup(address[],uint256,address,bytes,address,address,uint256,address payable)",
          "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address payable,bytes)",
          "checkSignatures(bytes32,bytes,bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "requiredTxGas(address,uint256,bytes,uint8)",
          "approveHash(bytes32)",
          "getChainId()",
          "domainSeparator()",
          "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)",
          "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GnosisSafe",
            "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:59"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GnosisSafe",
              "label": "nonce",
              "type": "t_uint256",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:51"
            },
            {
              "contract": "GnosisSafe",
              "label": "_deprecatedDomainSeparator",
              "type": "t_bytes32",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:52"
            },
            {
              "contract": "GnosisSafe",
              "label": "signedMessages",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:54"
            },
            {
              "contract": "GnosisSafe",
              "label": "approvedHashes",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:56"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Executor": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/Executor.sol:7",
        "version": {
          "withMetadata": "6506554cb665c4901484c6e0d2574a0d50c7aae2718cf5faa634c36ea5f9e144",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FallbackManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol:8",
        "version": {
          "withMetadata": "cf59f2de7b6414fca0893e20132bbde4a623aed99980bac686102e84ecf7641f",
          "withoutMetadata": "8958fc678a36eefc2909c42af66db2cd0094cee51d20a3f59e052651b580139e",
          "linkedWithoutMetadata": "8958fc678a36eefc2909c42af66db2cd0094cee51d20a3f59e052651b580139e"
        },
        "inherit": [
          "SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "setFallbackHandler(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Guard": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address payable,bytes,address)",
          "checkAfterExecution(bytes32,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GuardManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:27",
        "version": {
          "withMetadata": "c16ce58aaa2921031b799557500f312ab02d589c1d4fbacabc04391c2e0dd539",
          "withoutMetadata": "1fc96523280cf5aa33033e945f403d5d9449ee1161b7cf7a22aebdb00c93f6e7",
          "linkedWithoutMetadata": "1fc96523280cf5aa33033e945f403d5d9449ee1161b7cf7a22aebdb00c93f6e7"
        },
        "inherit": [
          "SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "setGuard(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ModuleManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:10",
        "version": {
          "withMetadata": "f0cbc11efa74257c9f1019f7fa980e91bf6929c710fd99a344c1ad893a8651f2",
          "withoutMetadata": "e2afd9d65254e939f2d133d6e5688ef219ad1a1627b807fd02729c557df1d608",
          "linkedWithoutMetadata": "e2afd9d65254e939f2d133d6e5688ef219ad1a1627b807fd02729c557df1d608"
        },
        "inherit": [
          "Executor",
          "SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "enableModule(address)",
          "disableModule(address,address)",
          "execTransactionFromModule(address,uint256,bytes,uint8)",
          "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)",
          "isModuleEnabled(address)",
          "getModulesPaginated(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ModuleManager",
              "label": "modules",
              "type": "t_mapping(t_address,t_address)",
              "src": "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:18"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnerManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:8",
        "version": {
          "withMetadata": "52bd88b4b953adcd4de7858bd1f13d24701f9a67b08a7589491e83ca09fc38cd",
          "withoutMetadata": "7b44935acee05618592c4e13d428fc60edd1aac8a2b840dc98f7d8ac59e7584d",
          "linkedWithoutMetadata": "7b44935acee05618592c4e13d428fc60edd1aac8a2b840dc98f7d8ac59e7584d"
        },
        "inherit": [
          "SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "addOwnerWithThreshold(address,uint256)",
          "removeOwner(address,address,uint256)",
          "swapOwner(address,address,address)",
          "changeThreshold(uint256)",
          "getThreshold()",
          "isOwner(address)",
          "getOwners()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnerManager",
              "label": "owners",
              "type": "t_mapping(t_address,t_address)",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:15"
            },
            {
              "contract": "OwnerManager",
              "label": "ownerCount",
              "type": "t_uint256",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:16"
            },
            {
              "contract": "OwnerManager",
              "label": "threshold",
              "type": "t_uint256",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Enum": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/Enum.sol:6",
        "version": {
          "withMetadata": "7bb0fc5b55e45aec04dc588d2b0a8d05f374636baf976d2c508b18331786aea8",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EtherPaymentFallback": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/EtherPaymentFallback.sol:6",
        "version": {
          "withMetadata": "dfce24db754c2cd62cd3a2345fd1799bb9d318975123b317a64e70290e4d1024",
          "withoutMetadata": "199985a867e0faf2fb5fa6dad070e2332168a68a1b8456d97f94c2e23ba57826",
          "linkedWithoutMetadata": "199985a867e0faf2fb5fa6dad070e2332168a68a1b8456d97f94c2e23ba57826"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SecuredTokenTransfer": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol:6",
        "version": {
          "withMetadata": "2ef3224d691ca0462e14406cd79e733c50fffbe36574648bbcda124d9785be9d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfAuthorized": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:6",
        "version": {
          "withMetadata": "de1d2f08b0dd38c22f1b377dfd46233cee9530ae77dc5c4e786bc417a76a6b12",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SignatureDecoder": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol:6",
        "version": {
          "withMetadata": "d7c85b7b5ad4a4297a6fdb7493479c673389b99e1b544843d909caefbefdd41f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Singleton": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:7",
        "version": {
          "withMetadata": "69580ac215eabe6c803dc78696fb3c38a9d11433b54e78b274d603aac38711cc",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Singleton",
              "label": "singleton",
              "type": "t_address",
              "src": "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageAccessible": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol:6",
        "version": {
          "withMetadata": "dc473742724b9b119206d5046aee71415c5e19a08aa3e85021aff1fe06bb41be",
          "withoutMetadata": "7d90980d072e81c7374598f01c9c19451a16b0bfe2d5946d1faf4672b1c1aac7",
          "linkedWithoutMetadata": "7d90980d072e81c7374598f01c9c19451a16b0bfe2d5946d1faf4672b1c1aac7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageAt(uint256,uint256)",
          "simulateAndRevert(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GnosisSafeMath": {
        "src": "@gnosis.pm/safe-contracts/contracts/external/GnosisSafeMath.sol:10",
        "version": {
          "withMetadata": "3dc89a1bcbf7986f1dc013eae8707e366e00a6c0f6399288ec06cdd147a09985",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISignatureValidator": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISignatureValidatorConstants": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:4",
        "version": {
          "withMetadata": "b47e62861936ba46b1522adae3ba75fd1d06b4f715f4bc5e7cef0286343881b6",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GnosisSafeProxy": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:13",
        "version": {
          "withMetadata": "85b0d8d817fb5a9aca4e8ceb4ca07b8ecaf60ceb5d67a9a67483e2df23f00c6d",
          "withoutMetadata": "adb3d54840a5d28e5b19bd1e1c659c6d14bdf1779aa1f4dfd2d22235ef51832d",
          "linkedWithoutMetadata": "adb3d54840a5d28e5b19bd1e1c659c6d14bdf1779aa1f4dfd2d22235ef51832d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GnosisSafeProxy",
            "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GnosisSafeProxy",
              "label": "singleton",
              "type": "t_address",
              "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IProxy": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "masterCopy()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GnosisSafeProxyFactory": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol:9",
        "version": {
          "withMetadata": "39e1562d160c82077f868fef83865e2e6c210e4d5533be5164eb4c7e1e0806aa",
          "withoutMetadata": "5afb27453402d4c766347760dfd43f98bc1adfb538ae3e87728567488e02feb4",
          "linkedWithoutMetadata": "5afb27453402d4c766347760dfd43f98bc1adfb538ae3e87728567488e02feb4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createProxy(address,bytes)",
          "proxyRuntimeCode()",
          "proxyCreationCode()",
          "createProxyWithNonce(address,bytes,uint256)",
          "createProxyWithCallback(address,bytes,uint256,address)",
          "calculateCreateProxyWithNonceAddress(address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IProxyCreationCallback": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxyCreated(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "71006b2bd68759478c9fbd1edb87e96bab94f1ca948d04fb6b2f82155bc17d28",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "df90d28e01adceefbfaed4f0a2d7e339fc5cd41d8b8d621661c5fd8b86aa0f34",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)3635_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)3635_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)3635_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)7444_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)7444_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)7444_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)7143_storage"
                }
              ]
            },
            "t_struct(Set)7143_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)4990_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)4990_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)6737_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)4990_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)4990_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)6737_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "a15170e7c0ce29eee761e52998717abd09c18b6c44b903a9ecb77528776dab7f",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)6737_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)6737_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AttackBackdoor": {
        "src": "contracts/backdoor/AttackBackdoor.sol:8",
        "version": {
          "withMetadata": "1c54f2a0fc7e3277f175db93d6f804a820b41bebdbd4b23c22a2459b507ec3ea",
          "withoutMetadata": "3ac1343897a9378666ab1a4d81db4461617c54fa307c90be03f998fd55098e6f",
          "linkedWithoutMetadata": "3ac1343897a9378666ab1a4d81db4461617c54fa307c90be03f998fd55098e6f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setupToken(address,address)",
          "attack(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AttackBackdoor",
            "src": "contracts/backdoor/AttackBackdoor.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AttackBackdoor",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:9"
            },
            {
              "contract": "AttackBackdoor",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:10"
            },
            {
              "contract": "AttackBackdoor",
              "label": "masterCopy",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:11"
            },
            {
              "contract": "AttackBackdoor",
              "label": "walletRegistry",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:12"
            },
            {
              "contract": "AttackBackdoor",
              "label": "token",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletRegistry": {
        "src": "contracts/backdoor/WalletRegistry.sol:16",
        "version": {
          "withMetadata": "e0bb6390824be72fdf72be7e10142bf9b7c4b365deba263e5d7a7ea87efa90c3",
          "withoutMetadata": "de91dd61291d84a4edad47232fab214f63d70e53239aa250915d6f2208ff974d",
          "linkedWithoutMetadata": "de91dd61291d84a4edad47232fab214f63d70e53239aa250915d6f2208ff974d"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IProxyCreationCallback"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address[])",
          "addBeneficiary(address)",
          "proxyCreated(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletRegistry",
            "src": "contracts/backdoor/WalletRegistry.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "masterCopy",
            "src": "contracts/backdoor/WalletRegistry.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "walletFactory",
            "src": "contracts/backdoor/WalletRegistry.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/backdoor/WalletRegistry.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletRegistry",
              "label": "beneficiaries",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/backdoor/WalletRegistry.sol:26"
            },
            {
              "contract": "WalletRegistry",
              "label": "wallets",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/backdoor/WalletRegistry.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AttackTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:20",
        "version": {
          "withMetadata": "f099590346f3b414d16e75f68b850d3f3b03e3785e9fbbc6b19fdd43659bfd41",
          "withoutMetadata": "b9633866d576ae7dc618f0c04c26188bb4a2d31c6e4bfebea116db3fd9429345",
          "linkedWithoutMetadata": "b9633866d576ae7dc618f0c04c26188bb4a2d31c6e4bfebea116db3fd9429345"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "exploit()",
          "schedule()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AttackTimelock",
            "src": "contracts/climber/AttackTimelock.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AttackTimelock",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:22"
            },
            {
              "contract": "AttackTimelock",
              "label": "timelock",
              "type": "t_contract(IClimberTimelock)8615",
              "src": "contracts/climber/AttackTimelock.sol:23"
            },
            {
              "contract": "AttackTimelock",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:24"
            },
            {
              "contract": "AttackTimelock",
              "label": "targets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:26"
            },
            {
              "contract": "AttackTimelock",
              "label": "values",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:27"
            },
            {
              "contract": "AttackTimelock",
              "label": "dataElements",
              "type": "t_array(t_bytes_storage)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:28"
            },
            {
              "contract": "AttackTimelock",
              "label": "salt",
              "type": "t_bytes32",
              "src": "contracts/climber/AttackTimelock.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IClimberTimelock)8615": {
              "label": "contract IClimberTimelock"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IClimberTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AttackerProxy": {
        "src": "contracts/climber/AttackerProxy.sol:11",
        "version": {
          "withMetadata": "ee8bfc918f8f715cb016350c62167be287bfc30d06ab5b6ca5cb3f39e62f8f9a",
          "withoutMetadata": "e24cc2a29e871de24ae3a05a963d952890c3e1ba4df82ed079166aad996572c9",
          "linkedWithoutMetadata": "e24cc2a29e871de24ae3a05a963d952890c3e1ba4df82ed079166aad996572c9"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "sweepFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AttackerProxy",
              "label": "_lastWithdrawalTimestamp",
              "type": "t_uint256",
              "src": "contracts/climber/AttackerProxy.sol:16"
            },
            {
              "contract": "AttackerProxy",
              "label": "_sweeper",
              "type": "t_address",
              "src": "contracts/climber/AttackerProxy.sol:17"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ClimberTimelock": {
        "src": "contracts/climber/ClimberTimelock.sol:11",
        "version": {
          "withMetadata": "3147f89a59d0253324b6c00582e2ff5ef113f09192767fd26ccf81da1485a2c9",
          "withoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01",
          "linkedWithoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "getOperationState(bytes32)",
          "getOperationId(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "updateDelay(uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ClimberTimelock",
            "src": "contracts/climber/ClimberTimelock.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "delay",
            "src": "contracts/climber/ClimberTimelock.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ClimberTimelock",
              "label": "operations",
              "type": "t_mapping(t_bytes32,t_struct(Operation)8922_storage)",
              "src": "contracts/climber/ClimberTimelock.sol:33"
            },
            {
              "contract": "ClimberTimelock",
              "label": "delay",
              "type": "t_uint64",
              "src": "contracts/climber/ClimberTimelock.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(Operation)8922_storage)": {
              "label": "mapping(bytes32 => struct ClimberTimelock.Operation)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Operation)8922_storage": {
              "label": "struct ClimberTimelock.Operation",
              "members": [
                {
                  "label": "readyAtTimestamp",
                  "type": "t_uint64"
                },
                {
                  "label": "known",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ClimberVault": {
        "src": "contracts/climber/ClimberVault.sol:16",
        "version": {
          "withMetadata": "0b9da415d3b23dfa0a24f553cb31d032f31d9d76d1f7c0a389c066b1257cc83b",
          "withoutMetadata": "ece21939478de1b774e10b4df05d2a765fb502a480737ccc104dab6fc7cf89f7",
          "linkedWithoutMetadata": "ece21939478de1b774e10b4df05d2a765fb502a480737ccc104dab6fc7cf89f7"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,address)",
          "withdraw(address,address,uint256)",
          "sweepFunds(address)",
          "getSweeper()",
          "getLastWithdrawalTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ClimberVault",
              "label": "_lastWithdrawalTimestamp",
              "type": "t_uint256",
              "src": "contracts/climber/ClimberVault.sol:21"
            },
            {
              "contract": "ClimberVault",
              "label": "_sweeper",
              "type": "t_address",
              "src": "contracts/climber/ClimberVault.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Exchange": {
        "src": "contracts/compromised/Exchange.sol:14",
        "version": {
          "withMetadata": "55be64ef1fa7a152dba487d1f2bd609656a26f786c309cb342b7a699aeb865d5",
          "withoutMetadata": "7163ff2233602bd0f58c25d96ef532e9e527f04d66db0b274c2efbf1118de031",
          "linkedWithoutMetadata": "7163ff2233602bd0f58c25d96ef532e9e527f04d66db0b274c2efbf1118de031"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "buyOne()",
          "sellOne(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Exchange",
            "src": "contracts/compromised/Exchange.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/compromised/Exchange.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "oracle",
            "src": "contracts/compromised/Exchange.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TrustfulOracle": {
        "src": "contracts/compromised/TrustfulOracle.sol:13",
        "version": {
          "withMetadata": "d8570a697d5ce34f3479da4f20a60dbe7a22bc9d546a4df7be96c9c72e93468b",
          "withoutMetadata": "b50c184367833587542d4673d2f90c2142170767bc9ab32ed89989de63160c74",
          "linkedWithoutMetadata": "b50c184367833587542d4673d2f90c2142170767bc9ab32ed89989de63160c74"
        },
        "inherit": [
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],bool)",
          "setupInitialPrices(address[],string[],uint256[])",
          "postPrice(string,uint256)",
          "getMedianPrice(string)",
          "getAllPricesForSymbol(string)",
          "getPriceBySource(string,address)",
          "getNumberOfSources()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TrustfulOracle",
            "src": "contracts/compromised/TrustfulOracle.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TrustfulOracle",
              "label": "pricesBySource",
              "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))",
              "src": "contracts/compromised/TrustfulOracle.sol:19"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))": {
              "label": "mapping(address => mapping(string => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_string_memory_ptr,t_uint256)": {
              "label": "mapping(string => uint256)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TrustfulOracleInitializer": {
        "src": "contracts/compromised/TrustfulOracleInitializer.sol:10",
        "version": {
          "withMetadata": "c9e4de91e9a731a923a5395e78c36217899fca42808cf76a75b5172ea2145259",
          "withoutMetadata": "a6cef083199dd093e95892dcb2c31637919d36a6c2a756052c2337f9660bd0de",
          "linkedWithoutMetadata": "a6cef083199dd093e95892dcb2c31637919d36a6c2a756052c2337f9660bd0de"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address[],string[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TrustfulOracleInitializer",
            "src": "contracts/compromised/TrustfulOracleInitializer.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TrustfulOracleInitializer",
              "label": "oracle",
              "type": "t_contract(TrustfulOracle)10105",
              "src": "contracts/compromised/TrustfulOracleInitializer.sol:14"
            }
          ],
          "types": {
            "t_contract(TrustfulOracle)10105": {
              "label": "contract TrustfulOracle"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:19",
        "version": {
          "withMetadata": "9257401d78977dff095fc4630566f6c3bf826b86a6788be75306ee02681edc6e",
          "withoutMetadata": "4564f27591351f32261b6f6e48af3d259ef3cafe1c28c01cdb85f2431caaf1c1",
          "linkedWithoutMetadata": "4564f27591351f32261b6f6e48af3d259ef3cafe1c28c01cdb85f2431caaf1c1"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address payable,address)",
          "attack(address,uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:21"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWETH9": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "deposit()",
          "withdraw(uint256)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)8064",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)8064": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanReceiver": {
        "src": "contracts/naive-receiver/FlashLoanReceiver.sol:11",
        "version": {
          "withMetadata": "5038dfc5ec90b0f00429508a2ece46f9f262036b5749cf2751c97de58363e64e",
          "withoutMetadata": "eda2acb314ef96f1575c2b0a5c6a4fe71a44c771b7eb20f1a203d31f8f0ebbd4",
          "linkedWithoutMetadata": "eda2acb314ef96f1575c2b0a5c6a4fe71a44c771b7eb20f1a203d31f8f0ebbd4"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable)",
          "receiveEther(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiver",
            "src": "contracts/naive-receiver/FlashLoanReceiver.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiver",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/naive-receiver/FlashLoanReceiver.sol:14"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "NaiveReceiverLenderPool": {
        "src": "contracts/naive-receiver/NaiveReceiverLenderPool.sol:11",
        "version": {
          "withMetadata": "41b1128e13ec39292d5e8015af40843c0d87ef6f01c70f4257f2bbbaa82be20e",
          "withoutMetadata": "e3fcc399d03b4426592c0bd4b54aee44fc6b78b93ec7671dd3d44a5e9c84e3fe",
          "linkedWithoutMetadata": "e3fcc399d03b4426592c0bd4b54aee44fc6b78b93ec7671dd3d44a5e9c84e3fe"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "fixedFee()",
          "flashLoan(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PuppetPool": {
        "src": "contracts/puppet/PuppetPool.sol:12",
        "version": {
          "withMetadata": "8b7e826dc25f59d69545cd1fda060881b6f7cc697419fa53a3dc6e943eb628f4",
          "withoutMetadata": "c458cb98d921890173e6e80ec045a3e4059a55f6109f0955d006d0aa751a728b",
          "linkedWithoutMetadata": "c458cb98d921890173e6e80ec045a3e4059a55f6109f0955d006d0aa751a728b"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "borrow(uint256)",
          "calculateDepositRequired(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PuppetPool",
            "src": "contracts/puppet/PuppetPool.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapPair",
            "src": "contracts/puppet/PuppetPool.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/puppet/PuppetPool.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PuppetPool",
              "label": "deposits",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/puppet/PuppetPool.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)5295",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)11653",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)5295": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)11653": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)8150",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)11414_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)8150": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)11414_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)11414_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SnapAttack": {
        "src": "contracts/selfie/SnapAttack.sol:10",
        "version": {
          "withMetadata": "ef1ec6ce93000378f8da41db3aa0fd547ed81a10a76a2e67639fc4638ad76529",
          "withoutMetadata": "c8f18b57e08f4a4681a42b000d4ef4b196ec6f6661652c1c9c39ba244cd77f94",
          "linkedWithoutMetadata": "c8f18b57e08f4a4681a42b000d4ef4b196ec6f6661652c1c9c39ba244cd77f94"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable)",
          "attack(uint256,address)",
          "receiveTokens(address,uint256)",
          "executeRemoteFunc(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SnapAttack",
            "src": "contracts/selfie/SnapAttack.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SnapAttack",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)11653",
              "src": "contracts/selfie/SnapAttack.sol:12"
            },
            {
              "contract": "SnapAttack",
              "label": "pool",
              "type": "t_contract(SelfiePool)11395",
              "src": "contracts/selfie/SnapAttack.sol:13"
            },
            {
              "contract": "SnapAttack",
              "label": "actionId",
              "type": "t_uint256",
              "src": "contracts/selfie/SnapAttack.sol:15"
            }
          ],
          "types": {
            "t_contract(SimpleGovernance)11653": {
              "label": "contract SimpleGovernance"
            },
            "t_contract(SelfiePool)11395": {
              "label": "contract SelfiePool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanEtherReceiver": {
        "src": "contracts/side-entrance/SideEntranceLenderPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SideEntranceAttack": {
        "src": "contracts/side-entrance/SideEntranceLenderPool.sol:39",
        "version": {
          "withMetadata": "d94269f7e24c1866006389aa847bd4f49ec45af2f9fac7df65ff0be0a48f9714",
          "withoutMetadata": "8f7b100568510de0dc9f996bc0ef2c944405353223d701219bf5286d5dbc8ef1",
          "linkedWithoutMetadata": "8f7b100568510de0dc9f996bc0ef2c944405353223d701219bf5286d5dbc8ef1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "attack()",
          "execute()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SideEntranceAttack",
            "src": "contracts/side-entrance/SideEntranceLenderPool.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SideEntranceAttack",
              "label": "pool",
              "type": "t_contract(SideEntranceLenderPool)11869",
              "src": "contracts/side-entrance/SideEntranceLenderPool.sol:41"
            }
          ],
          "types": {
            "t_contract(SideEntranceLenderPool)11869": {
              "label": "contract SideEntranceLenderPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SideEntranceLenderPool": {
        "src": "contracts/side-entrance/SideEntranceLenderPool.sol:14",
        "version": {
          "withMetadata": "534b312262d60a0a813ff81a1456142f050fcc5bbc1c1286418d2e16bc077c2a",
          "withoutMetadata": "20941c44e7cc77530e1a7bbced60cbd6f87f66931dfb206f0fdeea6a4bb1dae5",
          "linkedWithoutMetadata": "20941c44e7cc77530e1a7bbced60cbd6f87f66931dfb206f0fdeea6a4bb1dae5"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "deposit()",
          "withdraw()",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SideEntranceLenderPool",
              "label": "balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/side-entrance/SideEntranceLenderPool.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderAttack": {
        "src": "contracts/the-rewarder/TheRewarderAttack.sol:11",
        "version": {
          "withMetadata": "7817eecb793c0f767d31e47e2ce89e669191127e34de143b6528964cfab6c00f",
          "withoutMetadata": "6974b0f8a4e21d7f2ec616f686039e44282dae9b946ed5ca4b77b63277c250c9",
          "linkedWithoutMetadata": "6974b0f8a4e21d7f2ec616f686039e44282dae9b946ed5ca4b77b63277c250c9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "attack(uint256)",
          "receiveFlashLoan(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderAttack",
            "src": "contracts/the-rewarder/TheRewarderAttack.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderAttack",
              "label": "liquidityToken",
              "type": "t_contract(DamnValuableToken)8089",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:13"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "flashLoanPool",
              "type": "t_contract(FlashLoanerPool)12175",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:14"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "theRewarderPool",
              "type": "t_contract(TheRewarderPool)12618",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:15"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "rewardToken",
              "type": "t_contract(RewardToken)12231",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:16"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:17"
            }
          ],
          "types": {
            "t_contract(DamnValuableToken)8089": {
              "label": "contract DamnValuableToken"
            },
            "t_contract(FlashLoanerPool)12175": {
              "label": "contract FlashLoanerPool"
            },
            "t_contract(TheRewarderPool)12618": {
              "label": "contract TheRewarderPool"
            },
            "t_contract(RewardToken)12231": {
              "label": "contract RewardToken"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "aa6f356808bf9f6c3eafa46510336a04ea499745013218a6e89dffd431f813d5",
          "withoutMetadata": "80a799c40c76b422eb47eb5406005d80e2dd2b3e2ed74cbfd193850fc95bd145",
          "linkedWithoutMetadata": "80a799c40c76b422eb47eb5406005d80e2dd2b3e2ed74cbfd193850fc95bd145"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)12082",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:27"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)12082": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TrusterLenderPool": {
        "src": "contracts/truster/TrusterLenderPool.sol:13",
        "version": {
          "withMetadata": "3be283a6a298984b7e4340752741068c1fe43437b20804a51fb4e183474fa121",
          "withoutMetadata": "95227288aa34f4deb903bfee9b67b506e926ba88b5a78fdbe5dc493e99fa2c1d",
          "linkedWithoutMetadata": "95227288aa34f4deb903bfee9b67b506e926ba88b5a78fdbe5dc493e99fa2c1d"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TrusterLenderPool",
            "src": "contracts/truster/TrusterLenderPool.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "damnValuableToken",
            "src": "contracts/truster/TrusterLenderPool.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReceiverUnstoppable": {
        "src": "contracts/unstoppable/ReceiverUnstoppable.sol:12",
        "version": {
          "withMetadata": "8c8e943df275f3a0dc71f51cc3e7f81801c5a5ad3f7a8c6c46ec7caaa3e455eb",
          "withoutMetadata": "cc9ef31dca2dd4eda9bd9d018fcbef9508a90dec52cc0c4972ddd3519dfa12b7",
          "linkedWithoutMetadata": "cc9ef31dca2dd4eda9bd9d018fcbef9508a90dec52cc0c4972ddd3519dfa12b7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "receiveTokens(address,uint256)",
          "executeFlashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReceiverUnstoppable",
            "src": "contracts/unstoppable/ReceiverUnstoppable.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pool",
            "src": "contracts/unstoppable/ReceiverUnstoppable.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "owner",
            "src": "contracts/unstoppable/ReceiverUnstoppable.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IReceiver": {
        "src": "contracts/unstoppable/UnstoppableLender.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UnstoppableLender": {
        "src": "contracts/unstoppable/UnstoppableLender.sol:16",
        "version": {
          "withMetadata": "274a2d8f20bc11fa02d9ab7bf1d70b2c86e477638b22210d7f1b96819f8c64a2",
          "withoutMetadata": "6f3b3aaf717751b179662a61c811d716a67af4effcde5710c6863dba72c1f298",
          "linkedWithoutMetadata": "6f3b3aaf717751b179662a61c811d716a67af4effcde5710c6863dba72c1f298"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "depositTokens(uint256)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnstoppableLender",
            "src": "contracts/unstoppable/UnstoppableLender.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "damnValuableToken",
            "src": "contracts/unstoppable/UnstoppableLender.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UnstoppableLender",
              "label": "poolBalance",
              "type": "t_uint256",
              "src": "contracts/unstoppable/UnstoppableLender.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "WETH9": {
        "src": "contracts/WETH9.sol:24",
        "version": {
          "withMetadata": "9ff0f71e0daab89dd19425bad249ed6485375c9df3d8e8268d573b54caeca51c",
          "withoutMetadata": "7a018d70f3a9341fbb9c90cbb0227fa08c546db996b1df35d99fccc036fe5f82",
          "linkedWithoutMetadata": "7a018d70f3a9341fbb9c90cbb0227fa08c546db996b1df35d99fccc036fe5f82"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts/WETH9.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts/WETH9.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts/WETH9.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETH9",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/WETH9.sol:25"
            },
            {
              "contract": "WETH9",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/WETH9.sol:26"
            },
            {
              "contract": "WETH9",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts/WETH9.sol:27"
            },
            {
              "contract": "WETH9",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WETH9.sol:34"
            },
            {
              "contract": "WETH9",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/WETH9.sol:35"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@uniswap/v2-periphery/contracts/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "16e8a68b6d097b1ac66147cf528304330e10aedb79b4c6d240572094955f8f64",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "@uniswap/v2-periphery/contracts/libraries/UniswapV2Library.sol:7",
        "version": {
          "withMetadata": "3feb8fd8aefdbb41506624b645202e56724643b28af4b49267506bfc5009d5f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/puppet-v2/PuppetV2Pool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PuppetV2Pool": {
        "src": "contracts/puppet-v2/PuppetV2Pool.sol:17",
        "version": {
          "withMetadata": "67c1bf7ae02a81bb03ca0039748a0719bad7324e9b48a8e4ebcde00709b9fcfb",
          "withoutMetadata": "f7eaf8582b8d3fabb94d07f9fe9294675627d098d049ab764846665b414706ed",
          "linkedWithoutMetadata": "f7eaf8582b8d3fabb94d07f9fe9294675627d098d049ab764846665b414706ed"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "UniswapV2Library"
        ],
        "methods": [
          "(address,address,address,address)",
          "borrow(uint256)",
          "calculateDepositOfWETHRequired(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PuppetV2Pool",
            "src": "contracts/puppet-v2/PuppetV2Pool.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PuppetV2Pool",
              "label": "_uniswapPair",
              "type": "t_address",
              "src": "contracts/puppet-v2/PuppetV2Pool.sol:20"
            },
            {
              "contract": "PuppetV2Pool",
              "label": "_uniswapFactory",
              "type": "t_address",
              "src": "contracts/puppet-v2/PuppetV2Pool.sol:21"
            },
            {
              "contract": "PuppetV2Pool",
              "label": "_token",
              "type": "t_contract(IERC20)820",
              "src": "contracts/puppet-v2/PuppetV2Pool.sol:22"
            },
            {
              "contract": "PuppetV2Pool",
              "label": "_weth",
              "type": "t_contract(IERC20)820",
              "src": "contracts/puppet-v2/PuppetV2Pool.sol:23"
            },
            {
              "contract": "PuppetV2Pool",
              "label": "deposits",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/puppet-v2/PuppetV2Pool.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)820": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AttackTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:20",
        "version": {
          "withMetadata": "f099590346f3b414d16e75f68b850d3f3b03e3785e9fbbc6b19fdd43659bfd41",
          "withoutMetadata": "b9633866d576ae7dc618f0c04c26188bb4a2d31c6e4bfebea116db3fd9429345",
          "linkedWithoutMetadata": "b9633866d576ae7dc618f0c04c26188bb4a2d31c6e4bfebea116db3fd9429345"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "exploit()",
          "schedule()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AttackTimelock",
            "src": "contracts/climber/AttackTimelock.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AttackTimelock",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:22"
            },
            {
              "contract": "AttackTimelock",
              "label": "timelock",
              "type": "t_contract(IClimberTimelock)30",
              "src": "contracts/climber/AttackTimelock.sol:23"
            },
            {
              "contract": "AttackTimelock",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:24"
            },
            {
              "contract": "AttackTimelock",
              "label": "targets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:26"
            },
            {
              "contract": "AttackTimelock",
              "label": "values",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:27"
            },
            {
              "contract": "AttackTimelock",
              "label": "dataElements",
              "type": "t_array(t_bytes_storage)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:28"
            },
            {
              "contract": "AttackTimelock",
              "label": "salt",
              "type": "t_bytes32",
              "src": "contracts/climber/AttackTimelock.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IClimberTimelock)30": {
              "label": "contract IClimberTimelock"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IClimberTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AttackTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:20",
        "version": {
          "withMetadata": "583a1370786f497f329dda8c7aeb84e5dc262f2eacdccd7b6b35905cb526057b",
          "withoutMetadata": "b9633866d576ae7dc618f0c04c26188bb4a2d31c6e4bfebea116db3fd9429345",
          "linkedWithoutMetadata": "b9633866d576ae7dc618f0c04c26188bb4a2d31c6e4bfebea116db3fd9429345"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "exploit()",
          "schedule()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AttackTimelock",
            "src": "contracts/climber/AttackTimelock.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AttackTimelock",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:22"
            },
            {
              "contract": "AttackTimelock",
              "label": "timelock",
              "type": "t_contract(IClimberTimelock)30",
              "src": "contracts/climber/AttackTimelock.sol:23"
            },
            {
              "contract": "AttackTimelock",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:24"
            },
            {
              "contract": "AttackTimelock",
              "label": "targets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:26"
            },
            {
              "contract": "AttackTimelock",
              "label": "values",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:27"
            },
            {
              "contract": "AttackTimelock",
              "label": "dataElements",
              "type": "t_array(t_bytes_storage)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:28"
            },
            {
              "contract": "AttackTimelock",
              "label": "salt",
              "type": "t_bytes32",
              "src": "contracts/climber/AttackTimelock.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IClimberTimelock)30": {
              "label": "contract IClimberTimelock"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IClimberTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AttackTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:20",
        "version": {
          "withMetadata": "5fad4aa83f6b0d7adf1e036a723856e4fbc7894f0fa040ef88bdd7466f1b26e3",
          "withoutMetadata": "ce68bc9cc3c9c8101384ae6bd25a224ec008481439c13e0a8f94ef35183a4c48",
          "linkedWithoutMetadata": "ce68bc9cc3c9c8101384ae6bd25a224ec008481439c13e0a8f94ef35183a4c48"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "exploit()",
          "schedule()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AttackTimelock",
            "src": "contracts/climber/AttackTimelock.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AttackTimelock",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:22"
            },
            {
              "contract": "AttackTimelock",
              "label": "timelock",
              "type": "t_contract(IClimberTimelock)30",
              "src": "contracts/climber/AttackTimelock.sol:23"
            },
            {
              "contract": "AttackTimelock",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:24"
            },
            {
              "contract": "AttackTimelock",
              "label": "targets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:26"
            },
            {
              "contract": "AttackTimelock",
              "label": "values",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:27"
            },
            {
              "contract": "AttackTimelock",
              "label": "dataElements",
              "type": "t_array(t_bytes_storage)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:28"
            },
            {
              "contract": "AttackTimelock",
              "label": "salt",
              "type": "t_bytes32",
              "src": "contracts/climber/AttackTimelock.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IClimberTimelock)30": {
              "label": "contract IClimberTimelock"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IClimberTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "71006b2bd68759478c9fbd1edb87e96bab94f1ca948d04fb6b2f82155bc17d28",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "df90d28e01adceefbfaed4f0a2d7e339fc5cd41d8b8d621661c5fd8b86aa0f34",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1058_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1058_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1058_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AttackerProxy": {
        "src": "contracts/climber/AttackerProxy.sol:11",
        "version": {
          "withMetadata": "ee8bfc918f8f715cb016350c62167be287bfc30d06ab5b6ca5cb3f39e62f8f9a",
          "withoutMetadata": "e24cc2a29e871de24ae3a05a963d952890c3e1ba4df82ed079166aad996572c9",
          "linkedWithoutMetadata": "e24cc2a29e871de24ae3a05a963d952890c3e1ba4df82ed079166aad996572c9"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "sweepFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AttackerProxy",
              "label": "_lastWithdrawalTimestamp",
              "type": "t_uint256",
              "src": "contracts/climber/AttackerProxy.sol:16"
            },
            {
              "contract": "AttackerProxy",
              "label": "_sweeper",
              "type": "t_address",
              "src": "contracts/climber/AttackerProxy.sol:17"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AttackTimelock": {
        "src": "contracts/climber/ClimberAttacker.sol:20",
        "version": {
          "withMetadata": "5817eeb84ab684b387580d3a4de3e2eda038fcb9206cf7864c163dfc2f4ec274",
          "withoutMetadata": "ce68bc9cc3c9c8101384ae6bd25a224ec008481439c13e0a8f94ef35183a4c48",
          "linkedWithoutMetadata": "ce68bc9cc3c9c8101384ae6bd25a224ec008481439c13e0a8f94ef35183a4c48"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "exploit()",
          "schedule()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AttackTimelock",
            "src": "contracts/climber/ClimberAttacker.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AttackTimelock",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/climber/ClimberAttacker.sol:22"
            },
            {
              "contract": "AttackTimelock",
              "label": "timelock",
              "type": "t_contract(IClimberTimelock)2168",
              "src": "contracts/climber/ClimberAttacker.sol:23"
            },
            {
              "contract": "AttackTimelock",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/climber/ClimberAttacker.sol:24"
            },
            {
              "contract": "AttackTimelock",
              "label": "targets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/climber/ClimberAttacker.sol:26"
            },
            {
              "contract": "AttackTimelock",
              "label": "values",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/climber/ClimberAttacker.sol:27"
            },
            {
              "contract": "AttackTimelock",
              "label": "dataElements",
              "type": "t_array(t_bytes_storage)dyn_storage",
              "src": "contracts/climber/ClimberAttacker.sol:28"
            },
            {
              "contract": "AttackTimelock",
              "label": "salt",
              "type": "t_bytes32",
              "src": "contracts/climber/ClimberAttacker.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IClimberTimelock)2168": {
              "label": "contract IClimberTimelock"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IClimberTimelock": {
        "src": "contracts/climber/ClimberAttacker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ClimberTimelock": {
        "src": "contracts/climber/ClimberTimelock.sol:11",
        "version": {
          "withMetadata": "3147f89a59d0253324b6c00582e2ff5ef113f09192767fd26ccf81da1485a2c9",
          "withoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01",
          "linkedWithoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "getOperationState(bytes32)",
          "getOperationId(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "updateDelay(uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ClimberTimelock",
            "src": "contracts/climber/ClimberTimelock.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "delay",
            "src": "contracts/climber/ClimberTimelock.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ClimberTimelock",
              "label": "operations",
              "type": "t_mapping(t_bytes32,t_struct(Operation)2395_storage)",
              "src": "contracts/climber/ClimberTimelock.sol:33"
            },
            {
              "contract": "ClimberTimelock",
              "label": "delay",
              "type": "t_uint64",
              "src": "contracts/climber/ClimberTimelock.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(Operation)2395_storage)": {
              "label": "mapping(bytes32 => struct ClimberTimelock.Operation)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Operation)2395_storage": {
              "label": "struct ClimberTimelock.Operation",
              "members": [
                {
                  "label": "readyAtTimestamp",
                  "type": "t_uint64"
                },
                {
                  "label": "known",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "71006b2bd68759478c9fbd1edb87e96bab94f1ca948d04fb6b2f82155bc17d28",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "df90d28e01adceefbfaed4f0a2d7e339fc5cd41d8b8d621661c5fd8b86aa0f34",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1058_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1058_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1058_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ClimberAttacker": {
        "src": "contracts/climber/ClimberAttacker.sol:20",
        "version": {
          "withMetadata": "c920d69fc7e419ec39004ec6019b3f8d50510eae5fb1c648479a7838667027f1",
          "withoutMetadata": "c1d6447d02ef7547c2a05b82b6ad9cb9832d27c25e0e7289ab0b7aa8cfab0f89",
          "linkedWithoutMetadata": "c1d6447d02ef7547c2a05b82b6ad9cb9832d27c25e0e7289ab0b7aa8cfab0f89"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "attack()",
          "schedule()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ClimberAttacker",
            "src": "contracts/climber/ClimberAttacker.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ClimberAttacker",
              "label": "targets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/climber/ClimberAttacker.sol:21"
            },
            {
              "contract": "ClimberAttacker",
              "label": "values",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/climber/ClimberAttacker.sol:22"
            },
            {
              "contract": "ClimberAttacker",
              "label": "dataElements",
              "type": "t_array(t_bytes_storage)dyn_storage",
              "src": "contracts/climber/ClimberAttacker.sol:23"
            },
            {
              "contract": "ClimberAttacker",
              "label": "salt",
              "type": "t_bytes32",
              "src": "contracts/climber/ClimberAttacker.sol:24"
            },
            {
              "contract": "ClimberAttacker",
              "label": "timelock",
              "type": "t_contract(IClimberTimelock)2382",
              "src": "contracts/climber/ClimberAttacker.sol:25"
            },
            {
              "contract": "ClimberAttacker",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/climber/ClimberAttacker.sol:26"
            },
            {
              "contract": "ClimberAttacker",
              "label": "attacker",
              "type": "t_address",
              "src": "contracts/climber/ClimberAttacker.sol:27"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_contract(IClimberTimelock)2382": {
              "label": "contract IClimberTimelock"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IClimberTimelock": {
        "src": "contracts/climber/ClimberAttacker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradedAttacker": {
        "src": "contracts/climber/UpgradedAttacker.sol:11",
        "version": {
          "withMetadata": "c481ff84db172e01f9f1de281bed030d75b00b8f2d7d0dfa56859c08e53d3bd1",
          "withoutMetadata": "e24cc2a29e871de24ae3a05a963d952890c3e1ba4df82ed079166aad996572c9",
          "linkedWithoutMetadata": "e24cc2a29e871de24ae3a05a963d952890c3e1ba4df82ed079166aad996572c9"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "sweepFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UpgradedAttacker",
              "label": "_lastWithdrawalTimestamp",
              "type": "t_uint256",
              "src": "contracts/climber/UpgradedAttacker.sol:16"
            },
            {
              "contract": "UpgradedAttacker",
              "label": "_sweeper",
              "type": "t_address",
              "src": "contracts/climber/UpgradedAttacker.sol:17"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ClimberTimelock": {
        "src": "contracts/climber/ClimberTimelock.sol:11",
        "version": {
          "withMetadata": "3147f89a59d0253324b6c00582e2ff5ef113f09192767fd26ccf81da1485a2c9",
          "withoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01",
          "linkedWithoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "getOperationState(bytes32)",
          "getOperationId(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "updateDelay(uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ClimberTimelock",
            "src": "contracts/climber/ClimberTimelock.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "delay",
            "src": "contracts/climber/ClimberTimelock.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ClimberTimelock",
              "label": "operations",
              "type": "t_mapping(t_bytes32,t_struct(Operation)2597_storage)",
              "src": "contracts/climber/ClimberTimelock.sol:33"
            },
            {
              "contract": "ClimberTimelock",
              "label": "delay",
              "type": "t_uint64",
              "src": "contracts/climber/ClimberTimelock.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(Operation)2597_storage)": {
              "label": "mapping(bytes32 => struct ClimberTimelock.Operation)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Operation)2597_storage": {
              "label": "struct ClimberTimelock.Operation",
              "members": [
                {
                  "label": "readyAtTimestamp",
                  "type": "t_uint64"
                },
                {
                  "label": "known",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AttackTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:20",
        "version": {
          "withMetadata": "ee18e1b7f26a45ccc420c2af792c54dac62176c8c4f4ea3768fb0251dc08f168",
          "withoutMetadata": "2033c9e47ef17247010ce5d9454943b4e196482138f89189ac49282b26603dab",
          "linkedWithoutMetadata": "2033c9e47ef17247010ce5d9454943b4e196482138f89189ac49282b26603dab"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "exploit()",
          "schedule()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AttackTimelock",
            "src": "contracts/climber/AttackTimelock.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AttackTimelock",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:22"
            },
            {
              "contract": "AttackTimelock",
              "label": "timelock",
              "type": "t_contract(IClimberTimelock)30",
              "src": "contracts/climber/AttackTimelock.sol:23"
            },
            {
              "contract": "AttackTimelock",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:24"
            },
            {
              "contract": "AttackTimelock",
              "label": "targets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:26"
            },
            {
              "contract": "AttackTimelock",
              "label": "values",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:27"
            },
            {
              "contract": "AttackTimelock",
              "label": "dataElements",
              "type": "t_array(t_bytes_storage)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:28"
            },
            {
              "contract": "AttackTimelock",
              "label": "salt",
              "type": "t_bytes32",
              "src": "contracts/climber/AttackTimelock.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IClimberTimelock)30": {
              "label": "contract IClimberTimelock"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IClimberTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AttackTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:20",
        "version": {
          "withMetadata": "25d19ab8ddb00e0adc6e374d6275796361085e8bf0ca13293b95a36971a2a88d",
          "withoutMetadata": "5a4807d0e8fde8d833fac77605f033819381bff9d5d91dcc761922536daa22fe",
          "linkedWithoutMetadata": "5a4807d0e8fde8d833fac77605f033819381bff9d5d91dcc761922536daa22fe"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "exploit()",
          "schedule()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AttackTimelock",
            "src": "contracts/climber/AttackTimelock.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AttackTimelock",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:22"
            },
            {
              "contract": "AttackTimelock",
              "label": "timelock",
              "type": "t_contract(IClimberTimelock)30",
              "src": "contracts/climber/AttackTimelock.sol:23"
            },
            {
              "contract": "AttackTimelock",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:24"
            },
            {
              "contract": "AttackTimelock",
              "label": "targets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:26"
            },
            {
              "contract": "AttackTimelock",
              "label": "values",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:27"
            },
            {
              "contract": "AttackTimelock",
              "label": "dataElements",
              "type": "t_array(t_bytes_storage)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:28"
            },
            {
              "contract": "AttackTimelock",
              "label": "salt",
              "type": "t_bytes32",
              "src": "contracts/climber/AttackTimelock.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IClimberTimelock)30": {
              "label": "contract IClimberTimelock"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IClimberTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AttackTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:20",
        "version": {
          "withMetadata": "1f2c0cfd6ba002ebe80178957079ba51c8747804f8ee2898c5772dc1ddb046e2",
          "withoutMetadata": "8c2e7643a6b451e454d7972c9bd8efda66b53ec970aa01bc9de65fcb882f12c0",
          "linkedWithoutMetadata": "8c2e7643a6b451e454d7972c9bd8efda66b53ec970aa01bc9de65fcb882f12c0"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "exploit()",
          "schedule()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AttackTimelock",
            "src": "contracts/climber/AttackTimelock.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AttackTimelock",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:22"
            },
            {
              "contract": "AttackTimelock",
              "label": "timelock",
              "type": "t_contract(IClimberTimelock)30",
              "src": "contracts/climber/AttackTimelock.sol:23"
            },
            {
              "contract": "AttackTimelock",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:24"
            },
            {
              "contract": "AttackTimelock",
              "label": "targets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:26"
            },
            {
              "contract": "AttackTimelock",
              "label": "values",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:27"
            },
            {
              "contract": "AttackTimelock",
              "label": "dataElements",
              "type": "t_array(t_bytes_storage)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:28"
            },
            {
              "contract": "AttackTimelock",
              "label": "salt",
              "type": "t_bytes32",
              "src": "contracts/climber/AttackTimelock.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IClimberTimelock)30": {
              "label": "contract IClimberTimelock"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IClimberTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "71006b2bd68759478c9fbd1edb87e96bab94f1ca948d04fb6b2f82155bc17d28",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "df90d28e01adceefbfaed4f0a2d7e339fc5cd41d8b8d621661c5fd8b86aa0f34",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1058_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1058_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1058_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AttackVault": {
        "src": "contracts/climber/AttackVault.sol:11",
        "version": {
          "withMetadata": "0aa3412b136d88963871335e592d4c53886832b8fd517c1ea1ac307b2f83e458",
          "withoutMetadata": "e24cc2a29e871de24ae3a05a963d952890c3e1ba4df82ed079166aad996572c9",
          "linkedWithoutMetadata": "e24cc2a29e871de24ae3a05a963d952890c3e1ba4df82ed079166aad996572c9"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "sweepFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AttackVault",
              "label": "_lastWithdrawalTimestamp",
              "type": "t_uint256",
              "src": "contracts/climber/AttackVault.sol:16"
            },
            {
              "contract": "AttackVault",
              "label": "_sweeper",
              "type": "t_address",
              "src": "contracts/climber/AttackVault.sol:17"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ClimberTimelock": {
        "src": "contracts/climber/ClimberTimelock.sol:11",
        "version": {
          "withMetadata": "3147f89a59d0253324b6c00582e2ff5ef113f09192767fd26ccf81da1485a2c9",
          "withoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01",
          "linkedWithoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "getOperationState(bytes32)",
          "getOperationId(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "updateDelay(uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ClimberTimelock",
            "src": "contracts/climber/ClimberTimelock.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "delay",
            "src": "contracts/climber/ClimberTimelock.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ClimberTimelock",
              "label": "operations",
              "type": "t_mapping(t_bytes32,t_struct(Operation)2169_storage)",
              "src": "contracts/climber/ClimberTimelock.sol:33"
            },
            {
              "contract": "ClimberTimelock",
              "label": "delay",
              "type": "t_uint64",
              "src": "contracts/climber/ClimberTimelock.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(Operation)2169_storage)": {
              "label": "mapping(bytes32 => struct ClimberTimelock.Operation)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Operation)2169_storage": {
              "label": "struct ClimberTimelock.Operation",
              "members": [
                {
                  "label": "readyAtTimestamp",
                  "type": "t_uint64"
                },
                {
                  "label": "known",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "71006b2bd68759478c9fbd1edb87e96bab94f1ca948d04fb6b2f82155bc17d28",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "df90d28e01adceefbfaed4f0a2d7e339fc5cd41d8b8d621661c5fd8b86aa0f34",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1058_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1058_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1058_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AttackVault": {
        "src": "contracts/climber/AttackVault.sol:11",
        "version": {
          "withMetadata": "2d87452328db9015335150424ab15c9eb621d76d8a9d84a53647517ff1986c65",
          "withoutMetadata": "eaed87b855c7f7a0ea4a0755199ce9cb10d4a9fa965d99c1bcf41b99e1392f0a",
          "linkedWithoutMetadata": "eaed87b855c7f7a0ea4a0755199ce9cb10d4a9fa965d99c1bcf41b99e1392f0a"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,address)",
          "withdraw(address,address,uint256)",
          "sweepFunds(address)",
          "getSweeper()",
          "getLastWithdrawalTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AttackVault",
              "label": "_lastWithdrawalTimestamp",
              "type": "t_uint256",
              "src": "contracts/climber/AttackVault.sol:16"
            },
            {
              "contract": "AttackVault",
              "label": "_sweeper",
              "type": "t_address",
              "src": "contracts/climber/AttackVault.sol:17"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ClimberTimelock": {
        "src": "contracts/climber/ClimberTimelock.sol:11",
        "version": {
          "withMetadata": "3147f89a59d0253324b6c00582e2ff5ef113f09192767fd26ccf81da1485a2c9",
          "withoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01",
          "linkedWithoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "getOperationState(bytes32)",
          "getOperationId(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "updateDelay(uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ClimberTimelock",
            "src": "contracts/climber/ClimberTimelock.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "delay",
            "src": "contracts/climber/ClimberTimelock.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ClimberTimelock",
              "label": "operations",
              "type": "t_mapping(t_bytes32,t_struct(Operation)2296_storage)",
              "src": "contracts/climber/ClimberTimelock.sol:33"
            },
            {
              "contract": "ClimberTimelock",
              "label": "delay",
              "type": "t_uint64",
              "src": "contracts/climber/ClimberTimelock.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(Operation)2296_storage)": {
              "label": "mapping(bytes32 => struct ClimberTimelock.Operation)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Operation)2296_storage": {
              "label": "struct ClimberTimelock.Operation",
              "members": [
                {
                  "label": "readyAtTimestamp",
                  "type": "t_uint64"
                },
                {
                  "label": "known",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "71006b2bd68759478c9fbd1edb87e96bab94f1ca948d04fb6b2f82155bc17d28",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "df90d28e01adceefbfaed4f0a2d7e339fc5cd41d8b8d621661c5fd8b86aa0f34",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)1058_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)1058_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)1058_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AttackClimber": {
        "src": "contracts/climber/AttackClimber.sol:11",
        "version": {
          "withMetadata": "9f868b38c3c357f1e51a10da5ddfba32e89f17ebc4865c0e63173690de683408",
          "withoutMetadata": "eae5cdc8516bc6138387ccb1453dfc6fafc8145f2375465d5b8d0599c8bb4f5a",
          "linkedWithoutMetadata": "eae5cdc8516bc6138387ccb1453dfc6fafc8145f2375465d5b8d0599c8bb4f5a"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "sweepFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AttackTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:20",
        "version": {
          "withMetadata": "aa33bd06d0ade975a8f3f35798db25f0793cb5e5c5a626af853cab28d09bf56b",
          "withoutMetadata": "c3fd49a204a416d03b59444919d6317a95d82e441cae3c63a6c1f8d24878b9bd",
          "linkedWithoutMetadata": "c3fd49a204a416d03b59444919d6317a95d82e441cae3c63a6c1f8d24878b9bd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "exploit()",
          "schedule()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AttackTimelock",
            "src": "contracts/climber/AttackTimelock.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AttackTimelock",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:22"
            },
            {
              "contract": "AttackTimelock",
              "label": "timelock",
              "type": "t_contract(IClimberTimelock)2158",
              "src": "contracts/climber/AttackTimelock.sol:23"
            },
            {
              "contract": "AttackTimelock",
              "label": "vault",
              "type": "t_address",
              "src": "contracts/climber/AttackTimelock.sol:24"
            },
            {
              "contract": "AttackTimelock",
              "label": "targets",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:26"
            },
            {
              "contract": "AttackTimelock",
              "label": "values",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:27"
            },
            {
              "contract": "AttackTimelock",
              "label": "dataElements",
              "type": "t_array(t_bytes_storage)dyn_storage",
              "src": "contracts/climber/AttackTimelock.sol:28"
            },
            {
              "contract": "AttackTimelock",
              "label": "salt",
              "type": "t_bytes32",
              "src": "contracts/climber/AttackTimelock.sol:29"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IClimberTimelock)2158": {
              "label": "contract IClimberTimelock"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_bytes_storage)dyn_storage": {
              "label": "bytes[]"
            },
            "t_bytes_storage": {
              "label": "bytes"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IClimberTimelock": {
        "src": "contracts/climber/AttackTimelock.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AttackVault": {
        "src": "contracts/climber/AttackVault.sol:11",
        "version": {
          "withMetadata": "e6054bc00669d1556e69b68e2f3ef534042c3dadceb0b5863d41ba5e5cd2a71b",
          "withoutMetadata": "eae5cdc8516bc6138387ccb1453dfc6fafc8145f2375465d5b8d0599c8bb4f5a",
          "linkedWithoutMetadata": "eae5cdc8516bc6138387ccb1453dfc6fafc8145f2375465d5b8d0599c8bb4f5a"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "sweepFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AttackerClimber": {
        "src": "contracts/climber/AttackerClimber.sol:11",
        "version": {
          "withMetadata": "6363e34b8cb7f0ae1b5d32b76258b2c0423cca571cdd649cebfaeaaa2a8cbb30",
          "withoutMetadata": "6dda0f505d59675f5cff125febd01b81cd7d6d366668496c7157158802259517",
          "linkedWithoutMetadata": "6dda0f505d59675f5cff125febd01b81cd7d6d366668496c7157158802259517"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "sweepFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AttackerClimber",
              "label": "_lastWithdrawalTimestamp",
              "type": "t_uint256",
              "src": "contracts/climber/AttackerClimber.sol:16"
            },
            {
              "contract": "AttackerClimber",
              "label": "_sweeper",
              "type": "t_address",
              "src": "contracts/climber/AttackerClimber.sol:17"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ClimberTimelock": {
        "src": "contracts/climber/ClimberTimelock.sol:11",
        "version": {
          "withMetadata": "3147f89a59d0253324b6c00582e2ff5ef113f09192767fd26ccf81da1485a2c9",
          "withoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01",
          "linkedWithoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "getOperationState(bytes32)",
          "getOperationId(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "updateDelay(uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ClimberTimelock",
            "src": "contracts/climber/ClimberTimelock.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "delay",
            "src": "contracts/climber/ClimberTimelock.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ClimberTimelock",
              "label": "operations",
              "type": "t_mapping(t_bytes32,t_struct(Operation)2565_storage)",
              "src": "contracts/climber/ClimberTimelock.sol:33"
            },
            {
              "contract": "ClimberTimelock",
              "label": "delay",
              "type": "t_uint64",
              "src": "contracts/climber/ClimberTimelock.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(Operation)2565_storage)": {
              "label": "mapping(bytes32 => struct ClimberTimelock.Operation)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Operation)2565_storage": {
              "label": "struct ClimberTimelock.Operation",
              "members": [
                {
                  "label": "readyAtTimestamp",
                  "type": "t_uint64"
                },
                {
                  "label": "known",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "GnosisSafeProxy": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:13",
        "version": {
          "withMetadata": "85b0d8d817fb5a9aca4e8ceb4ca07b8ecaf60ceb5d67a9a67483e2df23f00c6d",
          "withoutMetadata": "adb3d54840a5d28e5b19bd1e1c659c6d14bdf1779aa1f4dfd2d22235ef51832d",
          "linkedWithoutMetadata": "adb3d54840a5d28e5b19bd1e1c659c6d14bdf1779aa1f4dfd2d22235ef51832d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GnosisSafeProxy",
            "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GnosisSafeProxy",
              "label": "singleton",
              "type": "t_address",
              "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IProxy": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "masterCopy()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GnosisSafeProxyFactory": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol:9",
        "version": {
          "withMetadata": "39e1562d160c82077f868fef83865e2e6c210e4d5533be5164eb4c7e1e0806aa",
          "withoutMetadata": "5afb27453402d4c766347760dfd43f98bc1adfb538ae3e87728567488e02feb4",
          "linkedWithoutMetadata": "5afb27453402d4c766347760dfd43f98bc1adfb538ae3e87728567488e02feb4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createProxy(address,bytes)",
          "proxyRuntimeCode()",
          "proxyCreationCode()",
          "createProxyWithNonce(address,bytes,uint256)",
          "createProxyWithCallback(address,bytes,uint256,address)",
          "calculateCreateProxyWithNonceAddress(address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IProxyCreationCallback": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxyCreated(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AttackBackdoor": {
        "src": "contracts/backdoor/AttackBackdoor.sol:8",
        "version": {
          "withMetadata": "1c54f2a0fc7e3277f175db93d6f804a820b41bebdbd4b23c22a2459b507ec3ea",
          "withoutMetadata": "3ac1343897a9378666ab1a4d81db4461617c54fa307c90be03f998fd55098e6f",
          "linkedWithoutMetadata": "3ac1343897a9378666ab1a4d81db4461617c54fa307c90be03f998fd55098e6f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setupToken(address,address)",
          "attack(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AttackBackdoor",
            "src": "contracts/backdoor/AttackBackdoor.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AttackBackdoor",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:9"
            },
            {
              "contract": "AttackBackdoor",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:10"
            },
            {
              "contract": "AttackBackdoor",
              "label": "masterCopy",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:11"
            },
            {
              "contract": "AttackBackdoor",
              "label": "walletRegistry",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:12"
            },
            {
              "contract": "AttackBackdoor",
              "label": "token",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "GnosisSafeProxy": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:13",
        "version": {
          "withMetadata": "85b0d8d817fb5a9aca4e8ceb4ca07b8ecaf60ceb5d67a9a67483e2df23f00c6d",
          "withoutMetadata": "adb3d54840a5d28e5b19bd1e1c659c6d14bdf1779aa1f4dfd2d22235ef51832d",
          "linkedWithoutMetadata": "adb3d54840a5d28e5b19bd1e1c659c6d14bdf1779aa1f4dfd2d22235ef51832d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GnosisSafeProxy",
            "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GnosisSafeProxy",
              "label": "singleton",
              "type": "t_address",
              "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IProxy": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "masterCopy()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GnosisSafeProxyFactory": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol:9",
        "version": {
          "withMetadata": "39e1562d160c82077f868fef83865e2e6c210e4d5533be5164eb4c7e1e0806aa",
          "withoutMetadata": "5afb27453402d4c766347760dfd43f98bc1adfb538ae3e87728567488e02feb4",
          "linkedWithoutMetadata": "5afb27453402d4c766347760dfd43f98bc1adfb538ae3e87728567488e02feb4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createProxy(address,bytes)",
          "proxyRuntimeCode()",
          "proxyCreationCode()",
          "createProxyWithNonce(address,bytes,uint256)",
          "createProxyWithCallback(address,bytes,uint256,address)",
          "calculateCreateProxyWithNonceAddress(address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IProxyCreationCallback": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxyCreated(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)322_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)322_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)322_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)2703_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)2703_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AttackBackdoor": {
        "src": "contracts/backdoor/AttackBackdoor.sol:8",
        "version": {
          "withMetadata": "c7174c15c210a0eb89aee4536a5a12aefa30080e368490cd621c6410acda0f93",
          "withoutMetadata": "d762b46c38b6c9c9863a1867ba14a8e207d77ad63c1d34915ad97e388cc9870e",
          "linkedWithoutMetadata": "d762b46c38b6c9c9863a1867ba14a8e207d77ad63c1d34915ad97e388cc9870e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address)",
          "setupToken(address,address)",
          "attack(address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AttackBackdoor",
            "src": "contracts/backdoor/AttackBackdoor.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "AttackBackdoor",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:9"
            },
            {
              "contract": "AttackBackdoor",
              "label": "factory",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:10"
            },
            {
              "contract": "AttackBackdoor",
              "label": "masterCopy",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:11"
            },
            {
              "contract": "AttackBackdoor",
              "label": "walletRegistry",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:12"
            },
            {
              "contract": "AttackBackdoor",
              "label": "token",
              "type": "t_address",
              "src": "contracts/backdoor/AttackBackdoor.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:19",
        "version": {
          "withMetadata": "9257401d78977dff095fc4630566f6c3bf826b86a6788be75306ee02681edc6e",
          "withoutMetadata": "4564f27591351f32261b6f6e48af3d259ef3cafe1c28c01cdb85f2431caaf1c1",
          "linkedWithoutMetadata": "4564f27591351f32261b6f6e48af3d259ef3cafe1c28c01cdb85f2431caaf1c1"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address payable,address)",
          "attack(address,uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:21"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWETH9": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "deposit()",
          "withdraw(uint256)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)3343",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)3343": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)1829_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)1829_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:19",
        "version": {
          "withMetadata": "da4c6760b4d8f4be6f78f955836a0a9556782f982bc29e2cc433bc10911a0579",
          "withoutMetadata": "4564f27591351f32261b6f6e48af3d259ef3cafe1c28c01cdb85f2431caaf1c1",
          "linkedWithoutMetadata": "4564f27591351f32261b6f6e48af3d259ef3cafe1c28c01cdb85f2431caaf1c1"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address payable,address)",
          "attack(address,uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:21"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWETH9": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "deposit()",
          "withdraw(uint256)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)2469",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)2469": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)1829_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)1829_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:19",
        "version": {
          "withMetadata": "b978175a6ece4a5cd37b889f05bc8c64f31f2d6304efe28abf7c44b0259aae03",
          "withoutMetadata": "87cf14bffe9414ddb2aca410e9b2b8f07d56ee86de697e14e087e067e0bfdfee",
          "linkedWithoutMetadata": "87cf14bffe9414ddb2aca410e9b2b8f07d56ee86de697e14e087e067e0bfdfee"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address payable,address)",
          "attack(address,uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "weth",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:21"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWETH9": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "deposit()",
          "withdraw(uint256)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)2469",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)2469": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)1829_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)1829_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:19",
        "version": {
          "withMetadata": "dd6ae886f0771e7431247e1164eb056b5bf3b7bc4c2791f74f868f25181898a8",
          "withoutMetadata": "87cf14bffe9414ddb2aca410e9b2b8f07d56ee86de697e14e087e067e0bfdfee",
          "linkedWithoutMetadata": "87cf14bffe9414ddb2aca410e9b2b8f07d56ee86de697e14e087e067e0bfdfee"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address payable,address)",
          "attack(address,uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "weth",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:21"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWETH9": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "deposit()",
          "withdraw(uint256)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)2469",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)2469": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)1829_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)1829_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:19",
        "version": {
          "withMetadata": "5bf4ae9b32d16e835c4126548836ff8f527afe2c260c78a5188c02fb1d076d41",
          "withoutMetadata": "18ff017ffe7da17c6a16f559a4f0ae06763747d2716015b8bc88a666a496319e",
          "linkedWithoutMetadata": "18ff017ffe7da17c6a16f559a4f0ae06763747d2716015b8bc88a666a496319e"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address payable,address)",
          "attack(address,uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "weth",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:21"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWETH9": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "deposit()",
          "withdraw(uint256)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)2469",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)2469": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)1829_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)1829_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:19",
        "version": {
          "withMetadata": "48411354929638382eeaad9f3933ea342d4f08a3ec54e0235b27a5f74482fd4a",
          "withoutMetadata": "a0cb592eb45a5a5e50b6fd068f74980730074901c3640523f7b73527b6d5d2c2",
          "linkedWithoutMetadata": "a0cb592eb45a5a5e50b6fd068f74980730074901c3640523f7b73527b6d5d2c2"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address payable,address)",
          "attack(address,uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "weth",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:21"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWETH9": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "deposit()",
          "withdraw(uint256)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)2469",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)2469": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)1829_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)1829_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:20",
        "version": {
          "withMetadata": "ecba2a34a784822041a8dd718e46a7da7220430af3104d9b0921e8b3ed36752d",
          "withoutMetadata": "5b9d62328a6bd529911884acb7ccde5a1fdc8bc23c6339dd5a13a819cf8f1574",
          "linkedWithoutMetadata": "5b9d62328a6bd529911884acb7ccde5a1fdc8bc23c6339dd5a13a819cf8f1574"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address payable,address)",
          "attack(address,uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "weth",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:22"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)2469",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)2469": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)1829_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)1829_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:20",
        "version": {
          "withMetadata": "22ae53a4551d0265246596a9e46c7c05ff00e6d29792e90b6536eec32c83403b",
          "withoutMetadata": "2133d974722c0c57fbc75108922430b3412846b4962abac846789ea10be397ac",
          "linkedWithoutMetadata": "2133d974722c0c57fbc75108922430b3412846b4962abac846789ea10be397ac"
        },
        "inherit": [
          "IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address payable,address)",
          "attack(address,uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "weth",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:22"
            }
          ],
          "types": {
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)2469",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)2469": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)1751_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)1751_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:19",
        "version": {
          "withMetadata": "ac676c219bc0b1e9fb0fb9b6654bee94032d63aedc82c357a1b8876e9db8c23b",
          "withoutMetadata": "eea21104a219c7c041330907fded4459e77983aed6d7d9501f3b7fc4c6777360",
          "linkedWithoutMetadata": "eea21104a219c7c041330907fded4459e77983aed6d7d9501f3b7fc4c6777360"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address payable,address)",
          "attack(address,uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:31"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "weth",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)6_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:21"
            }
          ],
          "types": {
            "t_array(t_uint256)6_storage": {
              "label": "uint256[6]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWETH9": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "deposit()",
          "withdraw(uint256)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)2391",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)2391": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)1751_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)1751_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:19",
        "version": {
          "withMetadata": "61e6bad1dc0dc06c269a525227021515e4eab3c0a8b5f17d2f36622beb50ce63",
          "withoutMetadata": "10b74284a41b38d4f3b450330766092f7a161321443fe70beea294113da917fd",
          "linkedWithoutMetadata": "10b74284a41b38d4f3b450330766092f7a161321443fe70beea294113da917fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address payable,address)",
          "attack(uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "weth",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)6_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:21"
            },
            {
              "contract": "FreeRiderAttack",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/free-rider/FreeRiderAttack.sol:31"
            },
            {
              "contract": "FreeRiderAttack",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/free-rider/FreeRiderAttack.sol:32"
            }
          ],
          "types": {
            "t_array(t_uint256)6_storage": {
              "label": "uint256[6]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWETH9": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "deposit()",
          "withdraw(uint256)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)2391",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)2391": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)1751_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)1751_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:19",
        "version": {
          "withMetadata": "f5962044fac4e02ac0ac196045af862cec1cc4a77de151a471cf481e1acf38cf",
          "withoutMetadata": "7f318427085ea7fc9ad30b657d3775406d8e282e0fbae4792bcceef0a469f10b",
          "linkedWithoutMetadata": "7f318427085ea7fc9ad30b657d3775406d8e282e0fbae4792bcceef0a469f10b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address payable,address)",
          "attack(uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "weth",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)6_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:21"
            },
            {
              "contract": "FreeRiderAttack",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/free-rider/FreeRiderAttack.sol:31"
            },
            {
              "contract": "FreeRiderAttack",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/free-rider/FreeRiderAttack.sol:32"
            }
          ],
          "types": {
            "t_array(t_uint256)6_storage": {
              "label": "uint256[6]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWETH9": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "deposit()",
          "withdraw(uint256)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)2391",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)2391": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)1751_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)1751_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:19",
        "version": {
          "withMetadata": "653ed6f9d757b1cebe0c5e6d2b2d8990b03c030ccd1ed719d115e6dae0d20b34",
          "withoutMetadata": "10b74284a41b38d4f3b450330766092f7a161321443fe70beea294113da917fd",
          "linkedWithoutMetadata": "10b74284a41b38d4f3b450330766092f7a161321443fe70beea294113da917fd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address payable,address)",
          "attack(uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "weth",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)6_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:21"
            },
            {
              "contract": "FreeRiderAttack",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/free-rider/FreeRiderAttack.sol:31"
            },
            {
              "contract": "FreeRiderAttack",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/free-rider/FreeRiderAttack.sol:32"
            }
          ],
          "types": {
            "t_array(t_uint256)6_storage": {
              "label": "uint256[6]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWETH9": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "deposit()",
          "withdraw(uint256)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)2391",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)2391": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)1751_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)1751_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderAttack": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:19",
        "version": {
          "withMetadata": "88fcc2bf061567d0d76294d186607cfcd050d92ef98f72d4d5f6942b966a944c",
          "withoutMetadata": "6264e9820eb7078f5266d00356e65e6bcd0fd31371d7877613227874787ec293",
          "linkedWithoutMetadata": "6264e9820eb7078f5266d00356e65e6bcd0fd31371d7877613227874787ec293"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address payable,address,address payable,address)",
          "attack(uint256)",
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderAttack",
            "src": "contracts/free-rider/FreeRiderAttack.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tokenIds",
            "src": "contracts/free-rider/FreeRiderAttack.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderAttack.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "weth",
            "src": "contracts/free-rider/FreeRiderAttack.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pair",
            "src": "contracts/free-rider/FreeRiderAttack.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/free-rider/FreeRiderAttack.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyer",
            "src": "contracts/free-rider/FreeRiderAttack.sol:27"
          },
          {
            "kind": "state-variable-immutable",
            "name": "attacker",
            "src": "contracts/free-rider/FreeRiderAttack.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderAttack",
              "label": "tokenIds",
              "type": "t_array(t_uint256)6_storage",
              "src": "contracts/free-rider/FreeRiderAttack.sol:21"
            },
            {
              "contract": "FreeRiderAttack",
              "label": "token0",
              "type": "t_address",
              "src": "contracts/free-rider/FreeRiderAttack.sol:31"
            },
            {
              "contract": "FreeRiderAttack",
              "label": "token1",
              "type": "t_address",
              "src": "contracts/free-rider/FreeRiderAttack.sol:32"
            }
          ],
          "types": {
            "t_array(t_uint256)6_storage": {
              "label": "uint256[6]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IWETH9": {
        "src": "contracts/free-rider/FreeRiderAttack.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "deposit()",
          "withdraw(uint256)",
          "transfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)2391",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)2391": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)1066_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)1066_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1806_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)1066_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)1066_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1806_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderAttack": {
        "src": "contracts/the-rewarder/TheRewarderAttack.sol:11",
        "version": {
          "withMetadata": "7817eecb793c0f767d31e47e2ce89e669191127e34de143b6528964cfab6c00f",
          "withoutMetadata": "6974b0f8a4e21d7f2ec616f686039e44282dae9b946ed5ca4b77b63277c250c9",
          "linkedWithoutMetadata": "6974b0f8a4e21d7f2ec616f686039e44282dae9b946ed5ca4b77b63277c250c9"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "attack(uint256)",
          "receiveFlashLoan(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderAttack",
            "src": "contracts/the-rewarder/TheRewarderAttack.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderAttack",
              "label": "liquidityToken",
              "type": "t_contract(DamnValuableToken)2226",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:13"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "flashLoanPool",
              "type": "t_contract(FlashLoanerPool)2468",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:14"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "theRewarderPool",
              "type": "t_contract(TheRewarderPool)2911",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:15"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "rewardToken",
              "type": "t_contract(RewardToken)2524",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:16"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:17"
            }
          ],
          "types": {
            "t_contract(DamnValuableToken)2226": {
              "label": "contract DamnValuableToken"
            },
            "t_contract(FlashLoanerPool)2468": {
              "label": "contract FlashLoanerPool"
            },
            "t_contract(TheRewarderPool)2911": {
              "label": "contract TheRewarderPool"
            },
            "t_contract(RewardToken)2524": {
              "label": "contract RewardToken"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "aa6f356808bf9f6c3eafa46510336a04ea499745013218a6e89dffd431f813d5",
          "withoutMetadata": "80a799c40c76b422eb47eb5406005d80e2dd2b3e2ed74cbfd193850fc95bd145",
          "linkedWithoutMetadata": "80a799c40c76b422eb47eb5406005d80e2dd2b3e2ed74cbfd193850fc95bd145"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)2375",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:27"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)2375": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)1066_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)1066_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1806_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)1066_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)1066_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1806_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderAttack": {
        "src": "contracts/the-rewarder/TheRewarderAttack.sol:10",
        "version": {
          "withMetadata": "8e82419c0d4de23a8cd1531a4b1c5027120bd15b71927907700c4652155b6213",
          "withoutMetadata": "f46f69c06fb07be5f309f25bb26fb599f7c768a3e78d7b1cb9e595d2437b31cb",
          "linkedWithoutMetadata": "f46f69c06fb07be5f309f25bb26fb599f7c768a3e78d7b1cb9e595d2437b31cb"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "attack(uint256)",
          "receiveFlashLoan(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderAttack",
            "src": "contracts/the-rewarder/TheRewarderAttack.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderAttack",
              "label": "liquidityToken",
              "type": "t_contract(DamnValuableToken)2226",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:12"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "flashLoanPool",
              "type": "t_contract(FlashLoanerPool)2468",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:13"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "theRewarderPool",
              "type": "t_contract(TheRewarderPool)2885",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:14"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:15"
            }
          ],
          "types": {
            "t_contract(DamnValuableToken)2226": {
              "label": "contract DamnValuableToken"
            },
            "t_contract(FlashLoanerPool)2468": {
              "label": "contract FlashLoanerPool"
            },
            "t_contract(TheRewarderPool)2885": {
              "label": "contract TheRewarderPool"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "aa6f356808bf9f6c3eafa46510336a04ea499745013218a6e89dffd431f813d5",
          "withoutMetadata": "80a799c40c76b422eb47eb5406005d80e2dd2b3e2ed74cbfd193850fc95bd145",
          "linkedWithoutMetadata": "80a799c40c76b422eb47eb5406005d80e2dd2b3e2ed74cbfd193850fc95bd145"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)2375",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:27"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)2375": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)1066_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)1066_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1806_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)1066_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)1066_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1806_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderAttack": {
        "src": "contracts/the-rewarder/TheRewarderAttack.sol:10",
        "version": {
          "withMetadata": "c8fa8802772181fda71ca6075d78a8f236f99656492accb42536d8e3386320e1",
          "withoutMetadata": "668ee8a6c542062e897ebec3b97e849cc48d5a430986729c4699c95959dfcc13",
          "linkedWithoutMetadata": "668ee8a6c542062e897ebec3b97e849cc48d5a430986729c4699c95959dfcc13"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "attack(uint256)",
          "receiveFlashLoan(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderAttack",
            "src": "contracts/the-rewarder/TheRewarderAttack.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderAttack",
              "label": "liquidityToken",
              "type": "t_contract(DamnValuableToken)2226",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:12"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "flashLoanPool",
              "type": "t_contract(FlashLoanerPool)2468",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:13"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "theRewarderPool",
              "type": "t_contract(TheRewarderPool)2889",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:14"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:15"
            }
          ],
          "types": {
            "t_contract(DamnValuableToken)2226": {
              "label": "contract DamnValuableToken"
            },
            "t_contract(FlashLoanerPool)2468": {
              "label": "contract FlashLoanerPool"
            },
            "t_contract(TheRewarderPool)2889": {
              "label": "contract TheRewarderPool"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "aa6f356808bf9f6c3eafa46510336a04ea499745013218a6e89dffd431f813d5",
          "withoutMetadata": "80a799c40c76b422eb47eb5406005d80e2dd2b3e2ed74cbfd193850fc95bd145",
          "linkedWithoutMetadata": "80a799c40c76b422eb47eb5406005d80e2dd2b3e2ed74cbfd193850fc95bd145"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)2375",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:27"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)2375": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)1066_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)1066_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1806_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)1066_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)1066_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1806_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderAttack": {
        "src": "contracts/the-rewarder/TheRewarderAttack.sol:9",
        "version": {
          "withMetadata": "33c314fc1ed222723162d12058be7de53c015edae6c065978bc9049a4425902e",
          "withoutMetadata": "8ed6d5290681b04eb304e9d876d605543ff3fdd85134b5acab487b54d0800550",
          "linkedWithoutMetadata": "8ed6d5290681b04eb304e9d876d605543ff3fdd85134b5acab487b54d0800550"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address)",
          "attack(uint256)",
          "receiveFlashLoan(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderAttack",
            "src": "contracts/the-rewarder/TheRewarderAttack.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderAttack",
              "label": "liquidityToken",
              "type": "t_contract(DamnValuableToken)2226",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:11"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "flashLoanPool",
              "type": "t_contract(FlashLoanerPool)2468",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:12"
            },
            {
              "contract": "TheRewarderAttack",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/the-rewarder/TheRewarderAttack.sol:13"
            }
          ],
          "types": {
            "t_contract(DamnValuableToken)2226": {
              "label": "contract DamnValuableToken"
            },
            "t_contract(FlashLoanerPool)2468": {
              "label": "contract FlashLoanerPool"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "aa6f356808bf9f6c3eafa46510336a04ea499745013218a6e89dffd431f813d5",
          "withoutMetadata": "80a799c40c76b422eb47eb5406005d80e2dd2b3e2ed74cbfd193850fc95bd145",
          "linkedWithoutMetadata": "80a799c40c76b422eb47eb5406005d80e2dd2b3e2ed74cbfd193850fc95bd145"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)2375",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:27"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)2375": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2065",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2065": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1826_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1826_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1826_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SnapAttack": {
        "src": "contracts/selfie/SnapAttack.sol:10",
        "version": {
          "withMetadata": "ef1ec6ce93000378f8da41db3aa0fd547ed81a10a76a2e67639fc4638ad76529",
          "withoutMetadata": "c8f18b57e08f4a4681a42b000d4ef4b196ec6f6661652c1c9c39ba244cd77f94",
          "linkedWithoutMetadata": "c8f18b57e08f4a4681a42b000d4ef4b196ec6f6661652c1c9c39ba244cd77f94"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable)",
          "attack(uint256,address)",
          "receiveTokens(address,uint256)",
          "executeRemoteFunc(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SnapAttack",
            "src": "contracts/selfie/SnapAttack.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SnapAttack",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2065",
              "src": "contracts/selfie/SnapAttack.sol:12"
            },
            {
              "contract": "SnapAttack",
              "label": "pool",
              "type": "t_contract(SelfiePool)1807",
              "src": "contracts/selfie/SnapAttack.sol:13"
            },
            {
              "contract": "SnapAttack",
              "label": "actionId",
              "type": "t_uint256",
              "src": "contracts/selfie/SnapAttack.sol:15"
            }
          ],
          "types": {
            "t_contract(SimpleGovernance)2065": {
              "label": "contract SimpleGovernance"
            },
            "t_contract(SelfiePool)1807": {
              "label": "contract SelfiePool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:10",
        "version": {
          "withMetadata": "4aaad3a0c15cdb248a81db6136b255f4ab50737dde561b361cde4e59cda6c8eb",
          "withoutMetadata": "f9ae935fb90930cd4d407e835377660934fc0790fd88f684014a4aede0a02ed9",
          "linkedWithoutMetadata": "f9ae935fb90930cd4d407e835377660934fc0790fd88f684014a4aede0a02ed9"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable)",
          "attack(uint256,address)",
          "receiveTokens(address,uint256)",
          "executeRemoteFunc(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "trigger",
            "src": "contracts/selfie/FlashLoanSelfie.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2188",
              "src": "contracts/selfie/FlashLoanSelfie.sol:12"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "pool",
              "type": "t_contract(SelfiePool)1930",
              "src": "contracts/selfie/FlashLoanSelfie.sol:13"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "actionId",
              "type": "t_uint256",
              "src": "contracts/selfie/FlashLoanSelfie.sol:15"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/selfie/FlashLoanSelfie.sol:16"
            }
          ],
          "types": {
            "t_contract(SimpleGovernance)2188": {
              "label": "contract SimpleGovernance"
            },
            "t_contract(SelfiePool)1930": {
              "label": "contract SelfiePool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2188",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2188": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1949_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1949_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1949_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:10",
        "version": {
          "withMetadata": "255019dd8e27cfc5cf9efafd72bf709d9144ec44ab7d3b2c3dac0f41261ac8ad",
          "withoutMetadata": "779d25877db8e2428e0f4e65fae097d6ab7ef20c57d34bf68a7cbac9ba0c5d87",
          "linkedWithoutMetadata": "779d25877db8e2428e0f4e65fae097d6ab7ef20c57d34bf68a7cbac9ba0c5d87"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable)",
          "attack(uint256,address)",
          "receiveTokens(address,uint256)",
          "executeRemoteFunc(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "trigger",
            "src": "contracts/selfie/FlashLoanSelfie.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2185",
              "src": "contracts/selfie/FlashLoanSelfie.sol:12"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "pool",
              "type": "t_contract(SelfiePool)1927",
              "src": "contracts/selfie/FlashLoanSelfie.sol:13"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/selfie/FlashLoanSelfie.sol:15"
            }
          ],
          "types": {
            "t_contract(SimpleGovernance)2185": {
              "label": "contract SimpleGovernance"
            },
            "t_contract(SelfiePool)1927": {
              "label": "contract SelfiePool"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2185",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2185": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1946_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1946_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1946_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:10",
        "version": {
          "withMetadata": "aece98a17cf1b3e09e9edc980d13c2e5e94e629913318f51498abf35da2a9096",
          "withoutMetadata": "c34897c077f086abd8d659cb5ed744e61ef34694c847ced36b7072d0794d0eb9",
          "linkedWithoutMetadata": "c34897c077f086abd8d659cb5ed744e61ef34694c847ced36b7072d0794d0eb9"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable)",
          "attack(uint256,address)",
          "receiveTokens(address,uint256)",
          "executeRemoteFunc(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "trigger",
            "src": "contracts/selfie/FlashLoanSelfie.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2189",
              "src": "contracts/selfie/FlashLoanSelfie.sol:12"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "pool",
              "type": "t_contract(SelfiePool)1931",
              "src": "contracts/selfie/FlashLoanSelfie.sol:13"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/selfie/FlashLoanSelfie.sol:15"
            }
          ],
          "types": {
            "t_contract(SimpleGovernance)2189": {
              "label": "contract SimpleGovernance"
            },
            "t_contract(SelfiePool)1931": {
              "label": "contract SelfiePool"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2189",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2189": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1950_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1950_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1950_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:10",
        "version": {
          "withMetadata": "255019dd8e27cfc5cf9efafd72bf709d9144ec44ab7d3b2c3dac0f41261ac8ad",
          "withoutMetadata": "779d25877db8e2428e0f4e65fae097d6ab7ef20c57d34bf68a7cbac9ba0c5d87",
          "linkedWithoutMetadata": "779d25877db8e2428e0f4e65fae097d6ab7ef20c57d34bf68a7cbac9ba0c5d87"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable)",
          "attack(uint256,address)",
          "receiveTokens(address,uint256)",
          "executeRemoteFunc(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "trigger",
            "src": "contracts/selfie/FlashLoanSelfie.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2185",
              "src": "contracts/selfie/FlashLoanSelfie.sol:12"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "pool",
              "type": "t_contract(SelfiePool)1927",
              "src": "contracts/selfie/FlashLoanSelfie.sol:13"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/selfie/FlashLoanSelfie.sol:15"
            }
          ],
          "types": {
            "t_contract(SimpleGovernance)2185": {
              "label": "contract SimpleGovernance"
            },
            "t_contract(SelfiePool)1927": {
              "label": "contract SelfiePool"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2185",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2185": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1946_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1946_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1946_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:10",
        "version": {
          "withMetadata": "cdc0081f7a2244ca0e3f44bb0eccd566459941d763a8c13f0c748e407b979514",
          "withoutMetadata": "4f900b2e16de377b4b8e7b23bf0d38cda84b5362e7e5b4ddae54ff2574e63355",
          "linkedWithoutMetadata": "4f900b2e16de377b4b8e7b23bf0d38cda84b5362e7e5b4ddae54ff2574e63355"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)",
          "executeRemoteFunc(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "trigger",
            "src": "contracts/selfie/FlashLoanSelfie.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:13"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address",
              "src": "contracts/selfie/FlashLoanSelfie.sol:14"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2199",
              "src": "contracts/selfie/FlashLoanSelfie.sol:15"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "pool",
              "type": "t_contract(SelfiePool)1941",
              "src": "contracts/selfie/FlashLoanSelfie.sol:16"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/selfie/FlashLoanSelfie.sol:18"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(SimpleGovernance)2199": {
              "label": "contract SimpleGovernance"
            },
            "t_contract(SelfiePool)1941": {
              "label": "contract SelfiePool"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2199",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2199": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1960_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1960_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1960_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:10",
        "version": {
          "withMetadata": "c67f4b380f8fd537bed23068bd5a498e36025ea7d133f5145f2247581909a4c3",
          "withoutMetadata": "e36eb1e271b594beabfb269fbf779e8e85dfdf4319e31112e902c789bd34b989",
          "linkedWithoutMetadata": "e36eb1e271b594beabfb269fbf779e8e85dfdf4319e31112e902c789bd34b989"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "trigger",
            "src": "contracts/selfie/FlashLoanSelfie.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:13"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address",
              "src": "contracts/selfie/FlashLoanSelfie.sol:14"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2191",
              "src": "contracts/selfie/FlashLoanSelfie.sol:15"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "pool",
              "type": "t_contract(SelfiePool)1933",
              "src": "contracts/selfie/FlashLoanSelfie.sol:16"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/selfie/FlashLoanSelfie.sol:18"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(SimpleGovernance)2191": {
              "label": "contract SimpleGovernance"
            },
            "t_contract(SelfiePool)1933": {
              "label": "contract SelfiePool"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2191",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2191": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1952_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1952_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1952_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:10",
        "version": {
          "withMetadata": "d377cd476733cc49d8fd5777853cbd8c66eb674a441324f76a24e30de6788661",
          "withoutMetadata": "adedb119da1791737434f1de1c2fca3916a0c576143a2cdfd29c550f4a5ca6b8",
          "linkedWithoutMetadata": "adedb119da1791737434f1de1c2fca3916a0c576143a2cdfd29c550f4a5ca6b8"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "trigger",
            "src": "contracts/selfie/FlashLoanSelfie.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:13"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address",
              "src": "contracts/selfie/FlashLoanSelfie.sol:14"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2176",
              "src": "contracts/selfie/FlashLoanSelfie.sol:15"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "pool",
              "type": "t_contract(SelfiePool)1918",
              "src": "contracts/selfie/FlashLoanSelfie.sol:16"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/selfie/FlashLoanSelfie.sol:18"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(SimpleGovernance)2176": {
              "label": "contract SimpleGovernance"
            },
            "t_contract(SelfiePool)1918": {
              "label": "contract SelfiePool"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2176",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2176": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1937_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1937_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1937_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:10",
        "version": {
          "withMetadata": "29689caf8a1105586763b4475c526cc1f66abb65373fd52ace2907540d7d106b",
          "withoutMetadata": "37ee48faad67fc8a6713c299b00e1817ede88fee07957304887f370f69b1379f",
          "linkedWithoutMetadata": "37ee48faad67fc8a6713c299b00e1817ede88fee07957304887f370f69b1379f"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "trigger",
            "src": "contracts/selfie/FlashLoanSelfie.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:13"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address",
              "src": "contracts/selfie/FlashLoanSelfie.sol:14"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2172",
              "src": "contracts/selfie/FlashLoanSelfie.sol:15"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "pool",
              "type": "t_contract(SelfiePool)1914",
              "src": "contracts/selfie/FlashLoanSelfie.sol:16"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/selfie/FlashLoanSelfie.sol:18"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(SimpleGovernance)2172": {
              "label": "contract SimpleGovernance"
            },
            "t_contract(SelfiePool)1914": {
              "label": "contract SelfiePool"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2172",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2172": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1933_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1933_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1933_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:9",
        "version": {
          "withMetadata": "e4dc166cf625ab793a6a6747db4e7a5455fcdb5910a3ec25b5aa0d0e6133f879",
          "withoutMetadata": "7f9a4defda7158d3617d08a7d0664cd029194cec3d84281076442b7a1691613a",
          "linkedWithoutMetadata": "7f9a4defda7158d3617d08a7d0664cd029194cec3d84281076442b7a1691613a"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "trigger",
            "src": "contracts/selfie/FlashLoanSelfie.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:12"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address",
              "src": "contracts/selfie/FlashLoanSelfie.sol:13"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2163",
              "src": "contracts/selfie/FlashLoanSelfie.sol:14"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "pool",
              "type": "t_contract(SelfiePool)1905",
              "src": "contracts/selfie/FlashLoanSelfie.sol:15"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "trigger",
              "type": "t_bool",
              "src": "contracts/selfie/FlashLoanSelfie.sol:17"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(SimpleGovernance)2163": {
              "label": "contract SimpleGovernance"
            },
            "t_contract(SelfiePool)1905": {
              "label": "contract SelfiePool"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2163",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2163": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1924_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1924_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1924_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:32",
        "version": {
          "withMetadata": "9a5f4926cba92fc68e97b61b5f3682b82eb026aab55f1289a3009b0dfc0fd3ac",
          "withoutMetadata": "9a5f4926cba92fc68e97b61b5f3682b82eb026aab55f1289a3009b0dfc0fd3ac",
          "linkedWithoutMetadata": "9a5f4926cba92fc68e97b61b5f3682b82eb026aab55f1289a3009b0dfc0fd3ac"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "receiveTokens(address,uint256)",
          "executeFlashLoans(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:41"
          },
          {
            "kind": "state-variable-assignment",
            "name": "data",
            "src": "contracts/selfie/FlashLoanSelfie.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:35"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:36"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:37"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "pool",
              "type": "t_address",
              "src": "contracts/selfie/FlashLoanSelfie.sol:38"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "data",
              "type": "t_bytes_storage",
              "src": "contracts/selfie/FlashLoanSelfie.sol:39"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2065",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2065": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1826_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1826_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1826_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "266bf650d300ccdd60c84bf750b4782fae81c064731778a7924f24c612bc422c",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2063",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2063": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "e1b10a727fc1b69104b0c11007616e54c4d17b368e3f0a9ceb64fa69bacbbdcc",
          "withoutMetadata": "3e3a05639efc189ace873726ce8270a23469e0e06a5dd64d4940b9db80b48d0b",
          "linkedWithoutMetadata": "3e3a05639efc189ace873726ce8270a23469e0e06a5dd64d4940b9db80b48d0b"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1826_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1826_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1826_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:32",
        "version": {
          "withMetadata": "4d1905b9a9802e9a6d2ee78863be50a638bb8b12dce04b0ac68d60c180ca8c02",
          "withoutMetadata": "f30051d8bd5c6941f88a352f7c7a9c3785da7e859e7f47ec86eb35859bcf7909",
          "linkedWithoutMetadata": "f30051d8bd5c6941f88a352f7c7a9c3785da7e859e7f47ec86eb35859bcf7909"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "receiveTokens(address,uint256)",
          "executeFlashLoans(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:35"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:36"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:37"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "pool",
              "type": "t_address",
              "src": "contracts/selfie/FlashLoanSelfie.sol:38"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:32",
        "version": {
          "withMetadata": "91a6063c755bbb65dcb00ea8e3f524e151ad72d26fe0fbdf7454363a42786f54",
          "withoutMetadata": "7ffd29f72ebe9e2f30bea9bb80a1ad337320fff2a770ec0aa8e02c97a32eed25",
          "linkedWithoutMetadata": "7ffd29f72ebe9e2f30bea9bb80a1ad337320fff2a770ec0aa8e02c97a32eed25"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "receiveTokens(address,uint256)",
          "executeFlashLoans(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:35"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:36"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:37"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "lenderPool",
              "type": "t_address",
              "src": "contracts/selfie/FlashLoanSelfie.sol:38"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:32",
        "version": {
          "withMetadata": "d79354957f55dc6f0e5b97a168fd644442b52d49cd196821e8519bace27f8e18",
          "withoutMetadata": "ee313c5348380c4731ec4fd59a1e1c94cd3764e21aa8291c2f5fd72eff9d533a",
          "linkedWithoutMetadata": "ee313c5348380c4731ec4fd59a1e1c94cd3764e21aa8291c2f5fd72eff9d533a"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "receiveTokens(address,uint256)",
          "executeFlashLoans(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:35"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:36"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:37"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "lenderPool",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:38"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:32",
        "version": {
          "withMetadata": "c0fbb0e710701ab045b383d8bd5b55562c9626b23ab01689e2d00ef48dd26e2f",
          "withoutMetadata": "c5582d8fe9e8002aefba80aeb5c10d327d56881a08e064b1bcbf9814aa42a7bd",
          "linkedWithoutMetadata": "c5582d8fe9e8002aefba80aeb5c10d327d56881a08e064b1bcbf9814aa42a7bd"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "receiveTokens(address,uint256)",
          "executeFlashLoans(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:35"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:36"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:37"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "lenderPool",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:38"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:32",
        "version": {
          "withMetadata": "d79354957f55dc6f0e5b97a168fd644442b52d49cd196821e8519bace27f8e18",
          "withoutMetadata": "ee313c5348380c4731ec4fd59a1e1c94cd3764e21aa8291c2f5fd72eff9d533a",
          "linkedWithoutMetadata": "ee313c5348380c4731ec4fd59a1e1c94cd3764e21aa8291c2f5fd72eff9d533a"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "receiveTokens(address,uint256)",
          "executeFlashLoans(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:35"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:36"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:37"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "lenderPool",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:38"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:32",
        "version": {
          "withMetadata": "a9a60f520e72ede1f619139a4775e29f53017ece8230911d5f73f9930ac783f2",
          "withoutMetadata": "63939abe129a3b09fdf037d3542afef3ba2d878454d575ae71b7b46083fa38f7",
          "linkedWithoutMetadata": "63939abe129a3b09fdf037d3542afef3ba2d878454d575ae71b7b46083fa38f7"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "receiveTokens(address,uint256)",
          "executeFlashLoans(uint256)",
          "check()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:35"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:36"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:37"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "lenderPool",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:38"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "actId",
              "type": "t_uint256",
              "src": "contracts/selfie/FlashLoanSelfie.sol:40"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "testVal",
              "type": "t_uint256",
              "src": "contracts/selfie/FlashLoanSelfie.sol:42"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie1.sol:32",
        "version": {
          "withMetadata": "b1f89e034078d00c7dfbcb98e27d04189bc5ba84408b3a98803e22890b3c43b5",
          "withoutMetadata": "c17c7e7dc94c4e1741b90c14625a0674bfce6aa7b15e8c118a41de48bec3d98c",
          "linkedWithoutMetadata": "c17c7e7dc94c4e1741b90c14625a0674bfce6aa7b15e8c118a41de48bec3d98c"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "receiveTokens(address,uint256)",
          "executeFlashLoans(uint256)",
          "check()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie1.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie1.sol:35"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie1.sol:36"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie1.sol:37"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "lenderPool",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie1.sol:38"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "actId",
              "type": "t_uint256",
              "src": "contracts/selfie/FlashLoanSelfie1.sol:40"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "testVal",
              "type": "t_uint256",
              "src": "contracts/selfie/FlashLoanSelfie1.sol:42"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/FlashLoanSelfie1.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/FlashLoanSelfie1.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/FlashLoanSelfie1.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/FlashLoanSelfie1.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:32",
        "version": {
          "withMetadata": "141168fb99a51e61b83d44481de0c0b4d6d097cb11b8a12a0cf1fe382ec9c3ca",
          "withoutMetadata": "c17c7e7dc94c4e1741b90c14625a0674bfce6aa7b15e8c118a41de48bec3d98c",
          "linkedWithoutMetadata": "c17c7e7dc94c4e1741b90c14625a0674bfce6aa7b15e8c118a41de48bec3d98c"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "receiveTokens(address,uint256)",
          "executeFlashLoans(uint256)",
          "check()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/FlashLoanSelfie.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:35"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:36"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:37"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "lenderPool",
              "type": "t_address_payable",
              "src": "contracts/selfie/FlashLoanSelfie.sol:38"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "actId",
              "type": "t_uint256",
              "src": "contracts/selfie/FlashLoanSelfie.sol:40"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "testVal",
              "type": "t_uint256",
              "src": "contracts/selfie/FlashLoanSelfie.sol:42"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/FlashLoanSelfie.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanSelfie": {
        "src": "contracts/selfie/SelfieAttack.sol:32",
        "version": {
          "withMetadata": "b9b97cdbf2b509a9a1953b4a572bf73391c6f109dd11df67ff8f5c530f2a793d",
          "withoutMetadata": "c17c7e7dc94c4e1741b90c14625a0674bfce6aa7b15e8c118a41de48bec3d98c",
          "linkedWithoutMetadata": "c17c7e7dc94c4e1741b90c14625a0674bfce6aa7b15e8c118a41de48bec3d98c"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "receiveTokens(address,uint256)",
          "executeFlashLoans(uint256)",
          "check()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanSelfie",
            "src": "contracts/selfie/SelfieAttack.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanSelfie",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:35"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:36"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "governance",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:37"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "lenderPool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:38"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "actId",
              "type": "t_uint256",
              "src": "contracts/selfie/SelfieAttack.sol:40"
            },
            {
              "contract": "FlashLoanSelfie",
              "label": "testVal",
              "type": "t_uint256",
              "src": "contracts/selfie/SelfieAttack.sol:42"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:31",
        "version": {
          "withMetadata": "676d011ae470c990f11b3bb0fbd70f8881e701f98e2b3a3d2c04d4cd29eeff1f",
          "withoutMetadata": "50038773e7191a3d664dd3431ea402b69a5ff5b71b89f64d6d07e442b35c5cb3",
          "linkedWithoutMetadata": "50038773e7191a3d664dd3431ea402b69a5ff5b71b89f64d6d07e442b35c5cb3"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "data",
            "src": "contracts/selfie/SelfieAttack.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "data",
              "type": "t_uint256",
              "src": "contracts/selfie/SelfieAttack.sol:35"
            },
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:37"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:38"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:39"
            },
            {
              "contract": "SelfieAttack",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:31",
        "version": {
          "withMetadata": "b31bf38de4be5c31e7bc8136dc5a7f0e5a386b45838997c6d0b917259f4e662f",
          "withoutMetadata": "9386ee3cc3d3ace94673cdde40b2f04858e18ac4c2d03ef4dda58fe813731ce8",
          "linkedWithoutMetadata": "9386ee3cc3d3ace94673cdde40b2f04858e18ac4c2d03ef4dda58fe813731ce8"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:35"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:36"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:37"
            },
            {
              "contract": "SelfieAttack",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:38"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:31",
        "version": {
          "withMetadata": "bb6bb236bd82d3b4eb4fef25e2a4bf8a522b87ffc76641b822887e2e718c49e9",
          "withoutMetadata": "23993b9fb1be7ebcf5f0e4c1bea44678c771c69924e0618c980d197af08cf184",
          "linkedWithoutMetadata": "23993b9fb1be7ebcf5f0e4c1bea44678c771c69924e0618c980d197af08cf184"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:35"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:36"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:37"
            },
            {
              "contract": "SelfieAttack",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:38"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:31",
        "version": {
          "withMetadata": "b8d29162dac48aa489b4c1fdf7cf1df458a19be8a0d09aea341bb31c2c463f46",
          "withoutMetadata": "fcb5ce40bcb9daca5be9259008d5c53f0bff38394b320c90fb76f9f47323b607",
          "linkedWithoutMetadata": "fcb5ce40bcb9daca5be9259008d5c53f0bff38394b320c90fb76f9f47323b607"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:40"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:35"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:36"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:37"
            },
            {
              "contract": "SelfieAttack",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:38"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:31",
        "version": {
          "withMetadata": "ac0bd4b61773925040dfa64dbbab5e2c50d91909f1eadef67390d924620f955e",
          "withoutMetadata": "dc1826d9f5b77319035c993aa500533d2f75d0b858a3f763a86a081be1d82373",
          "linkedWithoutMetadata": "dc1826d9f5b77319035c993aa500533d2f75d0b858a3f763a86a081be1d82373"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:35"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:36"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:37"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:31",
        "version": {
          "withMetadata": "bb9fd162bd29d131fe38b95bd46ab2eda1a8afd12ae701adde59b71765c59f2c",
          "withoutMetadata": "dc1826d9f5b77319035c993aa500533d2f75d0b858a3f763a86a081be1d82373",
          "linkedWithoutMetadata": "dc1826d9f5b77319035c993aa500533d2f75d0b858a3f763a86a081be1d82373"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:35"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:36"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:37"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:31",
        "version": {
          "withMetadata": "82c7f72154791fb3acb1110d8084e1454f7b33c471065b4064fcfdf47468a809",
          "withoutMetadata": "362cb002181bb874731f517adca0db6646ba74b1e1bb8c3388a6695f0b628c8c",
          "linkedWithoutMetadata": "362cb002181bb874731f517adca0db6646ba74b1e1bb8c3388a6695f0b628c8c"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:35"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:36"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:37"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:31",
        "version": {
          "withMetadata": "cdec9ab6e67b19468154de98aa7efedca1abc65a0b496cc00e7d362ed2a84791",
          "withoutMetadata": "0d7b8848df9d95a5d165ff36434848b87208b09162cb1cb5f17fba0a041b467b",
          "linkedWithoutMetadata": "0d7b8848df9d95a5d165ff36434848b87208b09162cb1cb5f17fba0a041b467b"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:35"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:36"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:37"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:31",
        "version": {
          "withMetadata": "657b6def78d2adcfa6f30edd7e5f8f02d2dc46732088cd844a327157e8b7e722",
          "withoutMetadata": "03d89ff0eaa821086adbd880067bbf21994fbd3356881f2fb70de71b21d8fce0",
          "linkedWithoutMetadata": "03d89ff0eaa821086adbd880067bbf21994fbd3356881f2fb70de71b21d8fce0"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:35"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:36"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:37"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:31",
        "version": {
          "withMetadata": "a291a46b1241c9986d65bb929438fc3da9d9c0cfd8d29101659dbc22edcca78f",
          "withoutMetadata": "475f661c0e783abc27e2c690e5c199aaebeefa56a4de97c3e649d3e946b04088",
          "linkedWithoutMetadata": "475f661c0e783abc27e2c690e5c199aaebeefa56a4de97c3e649d3e946b04088"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:35"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:36"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:37"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:29",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:35",
        "version": {
          "withMetadata": "085baaaa36b5c561f6408cb4ba23f915b02a8f5327cabb842967262964518ec6",
          "withoutMetadata": "475f661c0e783abc27e2c690e5c199aaebeefa56a4de97c3e649d3e946b04088",
          "linkedWithoutMetadata": "475f661c0e783abc27e2c690e5c199aaebeefa56a4de97c3e649d3e946b04088"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:39"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:40"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:41"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2240",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2240": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)2001_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)2001_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)2001_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:29",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:35",
        "version": {
          "withMetadata": "d4ed523c8dd8960d8327b248768b59646e5b9228fccf1add53871ae755c51410",
          "withoutMetadata": "475f661c0e783abc27e2c690e5c199aaebeefa56a4de97c3e649d3e946b04088",
          "linkedWithoutMetadata": "475f661c0e783abc27e2c690e5c199aaebeefa56a4de97c3e649d3e946b04088"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:39"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:40"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:41"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2243",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2243": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)2004_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)2004_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)2004_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/selfie/SelfieAttack.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableTokenSnapshot": {
        "src": "contracts/selfie/SelfieAttack.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISelfiePool": {
        "src": "contracts/selfie/SelfieAttack.sol:29",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISimpleGovernance": {
        "src": "contracts/selfie/SelfieAttack.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:35",
        "version": {
          "withMetadata": "671a7b4786d43cbed9dd9ed16ccff5d9874800a4a47af427d46a0eaa1b687bd7",
          "withoutMetadata": "475f661c0e783abc27e2c690e5c199aaebeefa56a4de97c3e649d3e946b04088",
          "linkedWithoutMetadata": "475f661c0e783abc27e2c690e5c199aaebeefa56a4de97c3e649d3e946b04088"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable)",
          "attack(uint256)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:39"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:40"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/selfie/SelfieAttack.sol:41"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2243",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2243": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)2004_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)2004_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)2004_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:10",
        "version": {
          "withMetadata": "b2a8325d3893ffede2b9b210be6e8146007b00927630fa57bd38586b6a948c66",
          "withoutMetadata": "997583571da010df5a11fa1ea1e9a7836688da7a1185133a8d8b190e05ae6f93",
          "linkedWithoutMetadata": "997583571da010df5a11fa1ea1e9a7836688da7a1185133a8d8b190e05ae6f93"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,address)",
          "attack()",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SelfieAttack.sol:14"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_contract(SelfiePool)1914",
              "src": "contracts/selfie/SelfieAttack.sol:15"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_contract(SimpleGovernance)2172",
              "src": "contracts/selfie/SelfieAttack.sol:16"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_contract(SelfiePool)1914": {
              "label": "contract SelfiePool"
            },
            "t_contract(SimpleGovernance)2172": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2172",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2172": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1933_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1933_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1933_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:10",
        "version": {
          "withMetadata": "8987a469596f6220daa1d64608a4286737c2eb5e1f2ba023f119b9e412a83a14",
          "withoutMetadata": "94d4187c5fb54de2bcfc354e513e760a1f44705e29b52a5c21116fd560c4a2d6",
          "linkedWithoutMetadata": "94d4187c5fb54de2bcfc354e513e760a1f44705e29b52a5c21116fd560c4a2d6"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,address)",
          "attack()",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SelfieAttack.sol:14"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_contract(SelfiePool)1920",
              "src": "contracts/selfie/SelfieAttack.sol:15"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_contract(SimpleGovernance)2178",
              "src": "contracts/selfie/SelfieAttack.sol:16"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_contract(SelfiePool)1920": {
              "label": "contract SelfiePool"
            },
            "t_contract(SimpleGovernance)2178": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2178",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2178": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1939_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1939_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1939_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:10",
        "version": {
          "withMetadata": "f850191101ddc49ea603f73a1d97b89ad2c5fe9e4fae40b5f4861b2060a88fd4",
          "withoutMetadata": "f7af904537981b62c9b05dd7d5768daf52e76a2ade24128bb5b1a42b82fd7099",
          "linkedWithoutMetadata": "f7af904537981b62c9b05dd7d5768daf52e76a2ade24128bb5b1a42b82fd7099"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,address)",
          "attack()",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SelfieAttack.sol:14"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_contract(SelfiePool)1920",
              "src": "contracts/selfie/SelfieAttack.sol:15"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_contract(SimpleGovernance)2178",
              "src": "contracts/selfie/SelfieAttack.sol:16"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_contract(SelfiePool)1920": {
              "label": "contract SelfiePool"
            },
            "t_contract(SimpleGovernance)2178": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2178",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2178": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1939_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1939_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1939_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)686_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)686_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1426_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)686_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)686_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1426_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfieAttack": {
        "src": "contracts/selfie/SelfieAttack.sol:10",
        "version": {
          "withMetadata": "991e2a3b644ebd242ffecea513aca8b8fa5b9def64b91f84a594d51cbfb305d7",
          "withoutMetadata": "e6f7d8cf4105582584f485cafd3142f57c0bf4733c1a9de5928e586e0008e387",
          "linkedWithoutMetadata": "e6f7d8cf4105582584f485cafd3142f57c0bf4733c1a9de5928e586e0008e387"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,address)",
          "attack(bytes)",
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfieAttack",
            "src": "contracts/selfie/SelfieAttack.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfieAttack",
              "label": "token",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SelfieAttack.sol:14"
            },
            {
              "contract": "SelfieAttack",
              "label": "pool",
              "type": "t_contract(SelfiePool)1914",
              "src": "contracts/selfie/SelfieAttack.sol:15"
            },
            {
              "contract": "SelfieAttack",
              "label": "gov",
              "type": "t_contract(SimpleGovernance)2172",
              "src": "contracts/selfie/SelfieAttack.sol:16"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_contract(SelfiePool)1914": {
              "label": "contract SelfiePool"
            },
            "t_contract(SimpleGovernance)2172": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)991",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)2172",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)991": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)2172": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)1643",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)1933_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)1643": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)1933_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)1933_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanTheRewarder": {
        "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:27",
        "version": {
          "withMetadata": "4163930f569548f1649ed47efd1e34390860c4a54a083e068b2b5d27327db587",
          "withoutMetadata": "88b053cdee655ba88f75e4dbae19e7675fe15249713bfc2779abfd3a5e085d67",
          "linkedWithoutMetadata": "88b053cdee655ba88f75e4dbae19e7675fe15249713bfc2779abfd3a5e085d67"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable,address payable)",
          "receiveFlashLoan(uint256)",
          "execFlashLoans(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanTheRewarder",
            "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanTheRewarder",
              "label": "lenderPool",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:30"
            },
            {
              "contract": "FlashLoanTheRewarder",
              "label": "rewarderPool",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:31"
            },
            {
              "contract": "FlashLoanTheRewarder",
              "label": "rewardToken",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:32"
            },
            {
              "contract": "FlashLoanTheRewarder",
              "label": "liquidityToken",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:33"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRewardToken": {
        "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRewarderPool": {
        "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanTheRewarder": {
        "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:28",
        "version": {
          "withMetadata": "53d1523ab6a6fe4a8a5554f168295d3dcd45c92c6f6ca5bad2d11c23b2587682",
          "withoutMetadata": "848e3ccc93adf03b6c4e4f0ce56fac321fd5d952bc7e5e1e86d7e21e6644f6f6",
          "linkedWithoutMetadata": "848e3ccc93adf03b6c4e4f0ce56fac321fd5d952bc7e5e1e86d7e21e6644f6f6"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable,address payable,address payable,address payable,address payable)",
          "receiveFlashLoan(uint256)",
          "execFlashLoans(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanTheRewarder",
            "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:41"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanTheRewarder",
              "label": "lenderPool",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:31"
            },
            {
              "contract": "FlashLoanTheRewarder",
              "label": "rewarderPool",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:33"
            },
            {
              "contract": "FlashLoanTheRewarder",
              "label": "attacker",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:34"
            },
            {
              "contract": "FlashLoanTheRewarder",
              "label": "rewardToken",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:35"
            },
            {
              "contract": "FlashLoanTheRewarder",
              "label": "liquidityToken",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:37"
            },
            {
              "contract": "FlashLoanTheRewarder",
              "label": "testUint",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:39"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRewardToken": {
        "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRewarderPool": {
        "src": "contracts/the-rewarder/FlashLoanTheRewarder.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)1066_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)1066_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1806_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)1066_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)1066_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1806_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanerPool": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRewardToken": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRewarderPool": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewarderAttack": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:30",
        "version": {
          "withMetadata": "2502625c5e69bc51eb3b56c19686803dc7b2a637be67f561fdd5342746e05ef6",
          "withoutMetadata": "a7e0c5779a2b829bd285f9c56f982e724fc5b52b6ee35ebf6b11c833a931b177",
          "linkedWithoutMetadata": "a7e0c5779a2b829bd285f9c56f982e724fc5b52b6ee35ebf6b11c833a931b177"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "attack()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewarderAttack",
            "src": "contracts/the-rewarder/RewarderAttack.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RewarderAttack",
              "label": "flashLoanPool",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/RewarderAttack.sol:31"
            },
            {
              "contract": "RewarderAttack",
              "label": "dVTtoken",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/RewarderAttack.sol:32"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardToken",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/RewarderAttack.sol:33"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardPool",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/RewarderAttack.sol:34"
            },
            {
              "contract": "RewarderAttack",
              "label": "bal",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/RewarderAttack.sol:35"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "e82ae0160359f988a631186e050ee8ecbef5d56ef4286a46191b33e555d47034",
          "withoutMetadata": "ccb0332a3d080ee53cf7a5fb0ba165121ba63ff9271b553610cc8fa628c298b1",
          "linkedWithoutMetadata": "ccb0332a3d080ee53cf7a5fb0ba165121ba63ff9271b553610cc8fa628c298b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)2375",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)2375": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)1066_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)1066_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1806_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)1066_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)1066_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1806_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanerPool": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRewardToken": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRewarderPool": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewarderAttack": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:30",
        "version": {
          "withMetadata": "1567d617ccbb1cbb72b9412a1920fea8b66068d36d4bbb8f361fd4e0031b1e1d",
          "withoutMetadata": "32e5c029bd3f72b6d6d4dcc47831c914e7ba0b5cd2d94e280de95d905511105c",
          "linkedWithoutMetadata": "32e5c029bd3f72b6d6d4dcc47831c914e7ba0b5cd2d94e280de95d905511105c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "attack()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewarderAttack",
            "src": "contracts/the-rewarder/RewarderAttack.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RewarderAttack",
              "label": "flashLoanPool",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/RewarderAttack.sol:31"
            },
            {
              "contract": "RewarderAttack",
              "label": "dVTtoken",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/RewarderAttack.sol:32"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardToken",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/RewarderAttack.sol:33"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardPool",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/RewarderAttack.sol:34"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "e82ae0160359f988a631186e050ee8ecbef5d56ef4286a46191b33e555d47034",
          "withoutMetadata": "ccb0332a3d080ee53cf7a5fb0ba165121ba63ff9271b553610cc8fa628c298b1",
          "linkedWithoutMetadata": "ccb0332a3d080ee53cf7a5fb0ba165121ba63ff9271b553610cc8fa628c298b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)2375",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)2375": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)1066_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)1066_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1806_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)1066_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)1066_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1806_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IDamnValuableToken": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanerPool": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRewardToken": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRewarderPool": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:19",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewarderAttack": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:30",
        "version": {
          "withMetadata": "02fd6fbc3af53ef3334b09a8adc3eeab064f103dc6530054336aa2bec816be85",
          "withoutMetadata": "30660fff7c59fd7789d54e878d50b2650577c0938c64e523dd457461c1d1ca52",
          "linkedWithoutMetadata": "30660fff7c59fd7789d54e878d50b2650577c0938c64e523dd457461c1d1ca52"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address payable,address payable,address payable,address payable)",
          "attack()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewarderAttack",
            "src": "contracts/the-rewarder/RewarderAttack.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RewarderAttack",
              "label": "flashLoanPool",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/RewarderAttack.sol:31"
            },
            {
              "contract": "RewarderAttack",
              "label": "dVTtoken",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/RewarderAttack.sol:32"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardToken",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/RewarderAttack.sol:33"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardPool",
              "type": "t_address_payable",
              "src": "contracts/the-rewarder/RewarderAttack.sol:34"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "e82ae0160359f988a631186e050ee8ecbef5d56ef4286a46191b33e555d47034",
          "withoutMetadata": "ccb0332a3d080ee53cf7a5fb0ba165121ba63ff9271b553610cc8fa628c298b1",
          "linkedWithoutMetadata": "ccb0332a3d080ee53cf7a5fb0ba165121ba63ff9271b553610cc8fa628c298b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)2375",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)2375": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)1066_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)1066_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1806_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)1066_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)1066_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1806_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewarderAttack": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:9",
        "version": {
          "withMetadata": "ece04560c32eaae66555c3f20bc8aeff34059d5c32bde24ce760f958cb9484fa",
          "withoutMetadata": "d8b14720927f206007660135c4ecc94eeb9d4de768fbbfeaf87534b26cf78805",
          "linkedWithoutMetadata": "d8b14720927f206007660135c4ecc94eeb9d4de768fbbfeaf87534b26cf78805"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "attack()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewarderAttack",
            "src": "contracts/the-rewarder/RewarderAttack.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RewarderAttack",
              "label": "flashLoanPool",
              "type": "t_contract(FlashLoanerPool)2468",
              "src": "contracts/the-rewarder/RewarderAttack.sol:10"
            },
            {
              "contract": "RewarderAttack",
              "label": "dVTtoken",
              "type": "t_contract(DamnValuableToken)2226",
              "src": "contracts/the-rewarder/RewarderAttack.sol:11"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardToken",
              "type": "t_contract(RewardToken)2524",
              "src": "contracts/the-rewarder/RewarderAttack.sol:12"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardPool",
              "type": "t_contract(TheRewarderPool)2913",
              "src": "contracts/the-rewarder/RewarderAttack.sol:13"
            }
          ],
          "types": {
            "t_contract(FlashLoanerPool)2468": {
              "label": "contract FlashLoanerPool"
            },
            "t_contract(DamnValuableToken)2226": {
              "label": "contract DamnValuableToken"
            },
            "t_contract(RewardToken)2524": {
              "label": "contract RewardToken"
            },
            "t_contract(TheRewarderPool)2913": {
              "label": "contract TheRewarderPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "e82ae0160359f988a631186e050ee8ecbef5d56ef4286a46191b33e555d47034",
          "withoutMetadata": "ccb0332a3d080ee53cf7a5fb0ba165121ba63ff9271b553610cc8fa628c298b1",
          "linkedWithoutMetadata": "ccb0332a3d080ee53cf7a5fb0ba165121ba63ff9271b553610cc8fa628c298b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)2375",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)2375": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)1066_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)1066_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1806_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)1066_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)1066_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1806_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewarderAttack": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:9",
        "version": {
          "withMetadata": "fdc61b0ccb34858f83f069ffbb6a2eea54590691d09539e8eacfe0e6aae24b46",
          "withoutMetadata": "208050bf45c424cb510ed0b76e5115c74c5ea6b9ec7c5df8f8f092d6df5e1603",
          "linkedWithoutMetadata": "208050bf45c424cb510ed0b76e5115c74c5ea6b9ec7c5df8f8f092d6df5e1603"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "attack()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewarderAttack",
            "src": "contracts/the-rewarder/RewarderAttack.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RewarderAttack",
              "label": "flashLoanPool",
              "type": "t_contract(FlashLoanerPool)2468",
              "src": "contracts/the-rewarder/RewarderAttack.sol:10"
            },
            {
              "contract": "RewarderAttack",
              "label": "dVTtoken",
              "type": "t_contract(DamnValuableToken)2226",
              "src": "contracts/the-rewarder/RewarderAttack.sol:11"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardToken",
              "type": "t_contract(RewardToken)2524",
              "src": "contracts/the-rewarder/RewarderAttack.sol:12"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardPool",
              "type": "t_contract(TheRewarderPool)2913",
              "src": "contracts/the-rewarder/RewarderAttack.sol:13"
            }
          ],
          "types": {
            "t_contract(FlashLoanerPool)2468": {
              "label": "contract FlashLoanerPool"
            },
            "t_contract(DamnValuableToken)2226": {
              "label": "contract DamnValuableToken"
            },
            "t_contract(RewardToken)2524": {
              "label": "contract RewardToken"
            },
            "t_contract(TheRewarderPool)2913": {
              "label": "contract TheRewarderPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "e82ae0160359f988a631186e050ee8ecbef5d56ef4286a46191b33e555d47034",
          "withoutMetadata": "ccb0332a3d080ee53cf7a5fb0ba165121ba63ff9271b553610cc8fa628c298b1",
          "linkedWithoutMetadata": "ccb0332a3d080ee53cf7a5fb0ba165121ba63ff9271b553610cc8fa628c298b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)2375",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)2375": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)1066_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)1066_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1806_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)1066_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)1066_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1806_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewarderAttack": {
        "src": "contracts/the-rewarder/RewarderAttack.sol:9",
        "version": {
          "withMetadata": "c5b0aa4b87804d7a2ca89f3b41dc02eab64922c57447cbc8a68dadd2c14d92e7",
          "withoutMetadata": "d8b14720927f206007660135c4ecc94eeb9d4de768fbbfeaf87534b26cf78805",
          "linkedWithoutMetadata": "d8b14720927f206007660135c4ecc94eeb9d4de768fbbfeaf87534b26cf78805"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "attack()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewarderAttack",
            "src": "contracts/the-rewarder/RewarderAttack.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RewarderAttack",
              "label": "flashLoanPool",
              "type": "t_contract(FlashLoanerPool)2468",
              "src": "contracts/the-rewarder/RewarderAttack.sol:10"
            },
            {
              "contract": "RewarderAttack",
              "label": "dVTtoken",
              "type": "t_contract(DamnValuableToken)2226",
              "src": "contracts/the-rewarder/RewarderAttack.sol:11"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardToken",
              "type": "t_contract(RewardToken)2524",
              "src": "contracts/the-rewarder/RewarderAttack.sol:12"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardPool",
              "type": "t_contract(TheRewarderPool)2913",
              "src": "contracts/the-rewarder/RewarderAttack.sol:13"
            }
          ],
          "types": {
            "t_contract(FlashLoanerPool)2468": {
              "label": "contract FlashLoanerPool"
            },
            "t_contract(DamnValuableToken)2226": {
              "label": "contract DamnValuableToken"
            },
            "t_contract(RewardToken)2524": {
              "label": "contract RewardToken"
            },
            "t_contract(TheRewarderPool)2913": {
              "label": "contract TheRewarderPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "e82ae0160359f988a631186e050ee8ecbef5d56ef4286a46191b33e555d47034",
          "withoutMetadata": "ccb0332a3d080ee53cf7a5fb0ba165121ba63ff9271b553610cc8fa628c298b1",
          "linkedWithoutMetadata": "ccb0332a3d080ee53cf7a5fb0ba165121ba63ff9271b553610cc8fa628c298b1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)2375",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)2375": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)1066_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)1066_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1806_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)1066_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)1066_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1806_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewarderAttack": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:106",
        "version": {
          "withMetadata": "79a7b94590233a4863aeec436f38ea3fbd439ecfdfd9aa63e01fc22cdd98cd6e",
          "withoutMetadata": "d8b14720927f206007660135c4ecc94eeb9d4de768fbbfeaf87534b26cf78805",
          "linkedWithoutMetadata": "d8b14720927f206007660135c4ecc94eeb9d4de768fbbfeaf87534b26cf78805"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "attack()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewarderAttack",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:113"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "RewarderAttack",
              "label": "flashLoanPool",
              "type": "t_contract(FlashLoanerPool)2468",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:107"
            },
            {
              "contract": "RewarderAttack",
              "label": "dVTtoken",
              "type": "t_contract(DamnValuableToken)2226",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:108"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardToken",
              "type": "t_contract(RewardToken)2524",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:109"
            },
            {
              "contract": "RewarderAttack",
              "label": "rewardPool",
              "type": "t_contract(TheRewarderPool)2782",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:110"
            }
          ],
          "types": {
            "t_contract(FlashLoanerPool)2468": {
              "label": "contract FlashLoanerPool"
            },
            "t_contract(DamnValuableToken)2226": {
              "label": "contract DamnValuableToken"
            },
            "t_contract(RewardToken)2524": {
              "label": "contract RewardToken"
            },
            "t_contract(TheRewarderPool)2782": {
              "label": "contract TheRewarderPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "8d909d45c1074a87cde5fbb683f6714996097d6624d367d1007d94bdb39ea10e",
          "withoutMetadata": "483590f4bfcf49e6e834aaa80b845c6c39640dccdaf9522a9ae1bb5aa3cd9f84",
          "linkedWithoutMetadata": "483590f4bfcf49e6e834aaa80b845c6c39640dccdaf9522a9ae1bb5aa3cd9f84"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)2375",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)2375": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)1066_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)1066_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1806_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)1066_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)1066_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1806_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewarderAttack": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:106",
        "version": {
          "withMetadata": "70f3db9463b18f8d96802c10c860743d7584687826fae37d9493db60f378c888",
          "withoutMetadata": "434de2f2cd9c8ddec07ab6ae685e6836639a9832b40ad032e0aa4148557cc0bd",
          "linkedWithoutMetadata": "434de2f2cd9c8ddec07ab6ae685e6836639a9832b40ad032e0aa4148557cc0bd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "attack()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewarderAttack",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:113"
          },
          {
            "kind": "state-variable-immutable",
            "name": "flashLoanPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:107"
          },
          {
            "kind": "state-variable-immutable",
            "name": "dVTtoken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:108"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:109"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:110"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "ca6c7fe438484438023c51f8e7cd34e2b3038c0311afe7440cb7f691d2aa18b3",
          "withoutMetadata": "2d50e7b5a53a565664fbaaa4512145f1e192b478dc617ec857136288496256ed",
          "linkedWithoutMetadata": "2d50e7b5a53a565664fbaaa4512145f1e192b478dc617ec857136288496256ed"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)2375",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)2375": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)1066_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)1066_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)1806_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)1066_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)1066_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)1806_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewarderAttack": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:106",
        "version": {
          "withMetadata": "949b42e96dd7fba6bf24f918f4ef14e81c8fe644bd142b0a917c2bb859db58ad",
          "withoutMetadata": "434de2f2cd9c8ddec07ab6ae685e6836639a9832b40ad032e0aa4148557cc0bd",
          "linkedWithoutMetadata": "434de2f2cd9c8ddec07ab6ae685e6836639a9832b40ad032e0aa4148557cc0bd"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "attack()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewarderAttack",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:113"
          },
          {
            "kind": "state-variable-immutable",
            "name": "flashLoanPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:107"
          },
          {
            "kind": "state-variable-immutable",
            "name": "dVTtoken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:108"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:109"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:110"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:15",
        "version": {
          "withMetadata": "9f33cbaea79f9016eacb80efe81f70c7b7c1751082660ca7220b374844eb71e4",
          "withoutMetadata": "57c508d11d7b48eeb540b65834e78ad6a638ae881755d614301c3788171d8c47",
          "linkedWithoutMetadata": "57c508d11d7b48eeb540b65834e78ad6a638ae881755d614301c3788171d8c47"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:26"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:21"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:23"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)2375",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:30"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)2375": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanEtherReceiver": {
        "src": "contracts/side-entrance/SideEntranceLenderPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SideEntranceAttack": {
        "src": "contracts/side-entrance/SideEntranceLenderPool.sol:39",
        "version": {
          "withMetadata": "d94269f7e24c1866006389aa847bd4f49ec45af2f9fac7df65ff0be0a48f9714",
          "withoutMetadata": "8f7b100568510de0dc9f996bc0ef2c944405353223d701219bf5286d5dbc8ef1",
          "linkedWithoutMetadata": "8f7b100568510de0dc9f996bc0ef2c944405353223d701219bf5286d5dbc8ef1"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "attack()",
          "execute()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SideEntranceAttack",
            "src": "contracts/side-entrance/SideEntranceLenderPool.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SideEntranceAttack",
              "label": "pool",
              "type": "t_contract(SideEntranceLenderPool)392",
              "src": "contracts/side-entrance/SideEntranceLenderPool.sol:41"
            }
          ],
          "types": {
            "t_contract(SideEntranceLenderPool)392": {
              "label": "contract SideEntranceLenderPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SideEntranceLenderPool": {
        "src": "contracts/side-entrance/SideEntranceLenderPool.sol:14",
        "version": {
          "withMetadata": "534b312262d60a0a813ff81a1456142f050fcc5bbc1c1286418d2e16bc077c2a",
          "withoutMetadata": "20941c44e7cc77530e1a7bbced60cbd6f87f66931dfb206f0fdeea6a4bb1dae5",
          "linkedWithoutMetadata": "20941c44e7cc77530e1a7bbced60cbd6f87f66931dfb206f0fdeea6a4bb1dae5"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "deposit()",
          "withdraw()",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SideEntranceLenderPool",
              "label": "balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/side-entrance/SideEntranceLenderPool.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanEtherReceiver": {
        "src": "contracts/side-entrance/SideEntranceLenderPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SideEntranceAttack": {
        "src": "contracts/side-entrance/SideEntranceLenderPool.sol:39",
        "version": {
          "withMetadata": "dfe0b3eca37dfd81c01b9379d12a15ca316fd965b2e138ae807595643b81ea3e",
          "withoutMetadata": "44facf74f63533957ec3bb0aea952aafbea0c08945ac702bdd5bdc16b4f5a24c",
          "linkedWithoutMetadata": "44facf74f63533957ec3bb0aea952aafbea0c08945ac702bdd5bdc16b4f5a24c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "attack()",
          "execute()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SideEntranceAttack",
            "src": "contracts/side-entrance/SideEntranceLenderPool.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SideEntranceAttack",
              "label": "pool",
              "type": "t_contract(SideEntranceLenderPool)392",
              "src": "contracts/side-entrance/SideEntranceLenderPool.sol:41"
            }
          ],
          "types": {
            "t_contract(SideEntranceLenderPool)392": {
              "label": "contract SideEntranceLenderPool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SideEntranceLenderPool": {
        "src": "contracts/side-entrance/SideEntranceLenderPool.sol:14",
        "version": {
          "withMetadata": "9b528adee28aec6b4dd6471bda2bbc3eac107f737e4496e922b3ff6109991645",
          "withoutMetadata": "20941c44e7cc77530e1a7bbced60cbd6f87f66931dfb206f0fdeea6a4bb1dae5",
          "linkedWithoutMetadata": "20941c44e7cc77530e1a7bbced60cbd6f87f66931dfb206f0fdeea6a4bb1dae5"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "deposit()",
          "withdraw()",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SideEntranceLenderPool",
              "label": "balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/side-entrance/SideEntranceLenderPool.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TrusterLenderPool": {
        "src": "contracts/truster/TrusterLenderPool.sol:13",
        "version": {
          "withMetadata": "3be283a6a298984b7e4340752741068c1fe43437b20804a51fb4e183474fa121",
          "withoutMetadata": "95227288aa34f4deb903bfee9b67b506e926ba88b5a78fdbe5dc493e99fa2c1d",
          "linkedWithoutMetadata": "95227288aa34f4deb903bfee9b67b506e926ba88b5a78fdbe5dc493e99fa2c1d"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TrusterLenderPool",
            "src": "contracts/truster/TrusterLenderPool.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "damnValuableToken",
            "src": "contracts/truster/TrusterLenderPool.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TrusterLenderPool": {
        "src": "contracts/truster/TrusterLenderPool.sol:13",
        "version": {
          "withMetadata": "87d999894d65ddbdfda551c3c3bcbff6dd233080d6453a46d1375f303324d836",
          "withoutMetadata": "95227288aa34f4deb903bfee9b67b506e926ba88b5a78fdbe5dc493e99fa2c1d",
          "linkedWithoutMetadata": "95227288aa34f4deb903bfee9b67b506e926ba88b5a78fdbe5dc493e99fa2c1d"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TrusterLenderPool",
            "src": "contracts/truster/TrusterLenderPool.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "damnValuableToken",
            "src": "contracts/truster/TrusterLenderPool.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "GnosisSafe": {
        "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:19",
        "version": {
          "withMetadata": "d6b0f12a5de348d5af3088f6823ec9938f34574f28babd56554ceb0c9e51a71f",
          "withoutMetadata": "835f5dee7dd23a9b929117715bcf0a085540864c3b9b827f117547f2d6fffed1",
          "linkedWithoutMetadata": "835f5dee7dd23a9b929117715bcf0a085540864c3b9b827f117547f2d6fffed1"
        },
        "inherit": [
          "GuardManager",
          "StorageAccessible",
          "FallbackManager",
          "ISignatureValidatorConstants",
          "SecuredTokenTransfer",
          "SignatureDecoder",
          "OwnerManager",
          "ModuleManager",
          "Executor",
          "SelfAuthorized",
          "Singleton",
          "EtherPaymentFallback"
        ],
        "libraries": [
          "GnosisSafeMath"
        ],
        "methods": [
          "()",
          "setup(address[],uint256,address,bytes,address,address,uint256,address payable)",
          "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address payable,bytes)",
          "checkSignatures(bytes32,bytes,bytes)",
          "checkNSignatures(bytes32,bytes,bytes,uint256)",
          "requiredTxGas(address,uint256,bytes,uint8)",
          "approveHash(bytes32)",
          "getChainId()",
          "domainSeparator()",
          "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)",
          "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GnosisSafe",
            "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:59"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GnosisSafe",
              "label": "nonce",
              "type": "t_uint256",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:51"
            },
            {
              "contract": "GnosisSafe",
              "label": "_deprecatedDomainSeparator",
              "type": "t_bytes32",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:52"
            },
            {
              "contract": "GnosisSafe",
              "label": "signedMessages",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:54"
            },
            {
              "contract": "GnosisSafe",
              "label": "approvedHashes",
              "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))",
              "src": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol:56"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
              "label": "mapping(address => mapping(bytes32 => uint256))"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Executor": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/Executor.sol:7",
        "version": {
          "withMetadata": "6506554cb665c4901484c6e0d2574a0d50c7aae2718cf5faa634c36ea5f9e144",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FallbackManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol:8",
        "version": {
          "withMetadata": "cf59f2de7b6414fca0893e20132bbde4a623aed99980bac686102e84ecf7641f",
          "withoutMetadata": "8958fc678a36eefc2909c42af66db2cd0094cee51d20a3f59e052651b580139e",
          "linkedWithoutMetadata": "8958fc678a36eefc2909c42af66db2cd0094cee51d20a3f59e052651b580139e"
        },
        "inherit": [
          "SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "setFallbackHandler(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Guard": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address payable,bytes,address)",
          "checkAfterExecution(bytes32,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GuardManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol:27",
        "version": {
          "withMetadata": "c16ce58aaa2921031b799557500f312ab02d589c1d4fbacabc04391c2e0dd539",
          "withoutMetadata": "1fc96523280cf5aa33033e945f403d5d9449ee1161b7cf7a22aebdb00c93f6e7",
          "linkedWithoutMetadata": "1fc96523280cf5aa33033e945f403d5d9449ee1161b7cf7a22aebdb00c93f6e7"
        },
        "inherit": [
          "SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "setGuard(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ModuleManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:10",
        "version": {
          "withMetadata": "f0cbc11efa74257c9f1019f7fa980e91bf6929c710fd99a344c1ad893a8651f2",
          "withoutMetadata": "e2afd9d65254e939f2d133d6e5688ef219ad1a1627b807fd02729c557df1d608",
          "linkedWithoutMetadata": "e2afd9d65254e939f2d133d6e5688ef219ad1a1627b807fd02729c557df1d608"
        },
        "inherit": [
          "Executor",
          "SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "enableModule(address)",
          "disableModule(address,address)",
          "execTransactionFromModule(address,uint256,bytes,uint8)",
          "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)",
          "isModuleEnabled(address)",
          "getModulesPaginated(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ModuleManager",
              "label": "modules",
              "type": "t_mapping(t_address,t_address)",
              "src": "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol:18"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "OwnerManager": {
        "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:8",
        "version": {
          "withMetadata": "52bd88b4b953adcd4de7858bd1f13d24701f9a67b08a7589491e83ca09fc38cd",
          "withoutMetadata": "7b44935acee05618592c4e13d428fc60edd1aac8a2b840dc98f7d8ac59e7584d",
          "linkedWithoutMetadata": "7b44935acee05618592c4e13d428fc60edd1aac8a2b840dc98f7d8ac59e7584d"
        },
        "inherit": [
          "SelfAuthorized"
        ],
        "libraries": [],
        "methods": [
          "addOwnerWithThreshold(address,uint256)",
          "removeOwner(address,address,uint256)",
          "swapOwner(address,address,address)",
          "changeThreshold(uint256)",
          "getThreshold()",
          "isOwner(address)",
          "getOwners()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnerManager",
              "label": "owners",
              "type": "t_mapping(t_address,t_address)",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:15"
            },
            {
              "contract": "OwnerManager",
              "label": "ownerCount",
              "type": "t_uint256",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:16"
            },
            {
              "contract": "OwnerManager",
              "label": "threshold",
              "type": "t_uint256",
              "src": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Enum": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/Enum.sol:6",
        "version": {
          "withMetadata": "7bb0fc5b55e45aec04dc588d2b0a8d05f374636baf976d2c508b18331786aea8",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EtherPaymentFallback": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/EtherPaymentFallback.sol:6",
        "version": {
          "withMetadata": "dfce24db754c2cd62cd3a2345fd1799bb9d318975123b317a64e70290e4d1024",
          "withoutMetadata": "199985a867e0faf2fb5fa6dad070e2332168a68a1b8456d97f94c2e23ba57826",
          "linkedWithoutMetadata": "199985a867e0faf2fb5fa6dad070e2332168a68a1b8456d97f94c2e23ba57826"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SecuredTokenTransfer": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol:6",
        "version": {
          "withMetadata": "2ef3224d691ca0462e14406cd79e733c50fffbe36574648bbcda124d9785be9d",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SelfAuthorized": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol:6",
        "version": {
          "withMetadata": "de1d2f08b0dd38c22f1b377dfd46233cee9530ae77dc5c4e786bc417a76a6b12",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SignatureDecoder": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol:6",
        "version": {
          "withMetadata": "d7c85b7b5ad4a4297a6fdb7493479c673389b99e1b544843d909caefbefdd41f",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Singleton": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:7",
        "version": {
          "withMetadata": "69580ac215eabe6c803dc78696fb3c38a9d11433b54e78b274d603aac38711cc",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Singleton",
              "label": "singleton",
              "type": "t_address",
              "src": "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageAccessible": {
        "src": "@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol:6",
        "version": {
          "withMetadata": "dc473742724b9b119206d5046aee71415c5e19a08aa3e85021aff1fe06bb41be",
          "withoutMetadata": "7d90980d072e81c7374598f01c9c19451a16b0bfe2d5946d1faf4672b1c1aac7",
          "linkedWithoutMetadata": "7d90980d072e81c7374598f01c9c19451a16b0bfe2d5946d1faf4672b1c1aac7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getStorageAt(uint256,uint256)",
          "simulateAndRevert(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GnosisSafeMath": {
        "src": "@gnosis.pm/safe-contracts/contracts/external/GnosisSafeMath.sol:10",
        "version": {
          "withMetadata": "3dc89a1bcbf7986f1dc013eae8707e366e00a6c0f6399288ec06cdd147a09985",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISignatureValidator": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:9",
        "inherit": [
          "ISignatureValidatorConstants"
        ],
        "libraries": [],
        "methods": [
          "isValidSignature(bytes,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISignatureValidatorConstants": {
        "src": "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol:4",
        "version": {
          "withMetadata": "b47e62861936ba46b1522adae3ba75fd1d06b4f715f4bc5e7cef0286343881b6",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GnosisSafeProxy": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:13",
        "version": {
          "withMetadata": "85b0d8d817fb5a9aca4e8ceb4ca07b8ecaf60ceb5d67a9a67483e2df23f00c6d",
          "withoutMetadata": "adb3d54840a5d28e5b19bd1e1c659c6d14bdf1779aa1f4dfd2d22235ef51832d",
          "linkedWithoutMetadata": "adb3d54840a5d28e5b19bd1e1c659c6d14bdf1779aa1f4dfd2d22235ef51832d"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GnosisSafeProxy",
            "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GnosisSafeProxy",
              "label": "singleton",
              "type": "t_address",
              "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IProxy": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "masterCopy()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "GnosisSafeProxyFactory": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol:9",
        "version": {
          "withMetadata": "39e1562d160c82077f868fef83865e2e6c210e4d5533be5164eb4c7e1e0806aa",
          "withoutMetadata": "5afb27453402d4c766347760dfd43f98bc1adfb538ae3e87728567488e02feb4",
          "linkedWithoutMetadata": "5afb27453402d4c766347760dfd43f98bc1adfb538ae3e87728567488e02feb4"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "createProxy(address,bytes)",
          "proxyRuntimeCode()",
          "proxyCreationCode()",
          "createProxyWithNonce(address,bytes,uint256)",
          "createProxyWithCallback(address,bytes,uint256,address)",
          "calculateCreateProxyWithNonceAddress(address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IProxyCreationCallback": {
        "src": "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "proxyCreated(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "71006b2bd68759478c9fbd1edb87e96bab94f1ca948d04fb6b2f82155bc17d28",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "df90d28e01adceefbfaed4f0a2d7e339fc5cd41d8b8d621661c5fd8b86aa0f34",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:48",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)3635_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)3635_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)3635_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:12",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)7444_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:15"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)7444_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)7444_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)7143_storage"
                }
              ]
            },
            "t_struct(Set)7143_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:10",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "057a88c2f7ef1a79dce46630ed833b7196322266e38a16785d25d8bc30a3d87f",
          "withoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7",
          "linkedWithoutMetadata": "2b24d0496d2d4a0da4442b75304ad90c5b41d91304a08fd1ac8bddafe7dc65c7"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Snapshot": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:41",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Arrays",
          "Counters"
        ],
        "methods": [
          "balanceOfAt(address,uint256)",
          "totalSupplyAt(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Snapshot",
              "label": "_accountBalanceSnapshots",
              "type": "t_mapping(t_address,t_struct(Snapshots)4990_storage)",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:55"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_totalSupplySnapshots",
              "type": "t_struct(Snapshots)4990_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:56"
            },
            {
              "contract": "ERC20Snapshot",
              "label": "_currentSnapshotId",
              "type": "t_struct(Counter)6737_storage",
              "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol:59"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Snapshots)4990_storage)": {
              "label": "mapping(address => struct ERC20Snapshot.Snapshots)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Snapshots)4990_storage": {
              "label": "struct ERC20Snapshot.Snapshots",
              "members": [
                {
                  "label": "ids",
                  "type": "t_array(t_uint256)dyn_storage"
                },
                {
                  "label": "values",
                  "type": "t_array(t_uint256)dyn_storage"
                }
              ]
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(Counter)6737_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:18",
        "version": {
          "withMetadata": "e0314bde682f62c126cf9928622ac736303a336b0bab8a91a651b77812a3b2d1",
          "withoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342",
          "linkedWithoutMetadata": "248d365f5019c7746c7f0ae07fa493c4c4851789187a0e826c98932fce5a4342"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:43"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:29"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:35"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:38"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:12",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:11",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "9b8f4c2af38993060ba9838a64a7ba70034dfc3088937692ef5986b2b3359e3d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Arrays": {
        "src": "@openzeppelin/contracts/utils/Arrays.sol:10",
        "version": {
          "withMetadata": "610741761a832e4c3598a5ff140308d91ead653aa5147b59d2754492ca089952",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [
          "Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "@openzeppelin/contracts/utils/Counters.sol:13",
        "version": {
          "withMetadata": "03ac45fd3e0b4d630bf79e35356c9a7758fd4da75189731dc1da1b75d7667060",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:8",
        "version": {
          "withMetadata": "1adfb4169a54a41d5dbd6ec8056cee60d19c8db06eb610f358a103a750aa4f98",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "252453571fd83d5192655a9ed1126ca977536ba9855a1448d06be585f0bd53bb",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "a15170e7c0ce29eee761e52998717abd09c18b6c44b903a9ecb77528776dab7f",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableNFT": {
        "src": "contracts/DamnValuableNFT.sol:14",
        "version": {
          "withMetadata": "8b2248a0a8ed8fba56bec90ca464603046c2480534ff2d470ca7779501801a59",
          "withoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84",
          "linkedWithoutMetadata": "586caeaf4d89b6eb648f4b279208c6c236b4de9c07a85fa635b9b1118c358d84"
        },
        "inherit": [
          "AccessControl",
          "ERC721Burnable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Counters"
        ],
        "methods": [
          "()",
          "safeMint(address)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableNFT",
            "src": "contracts/DamnValuableNFT.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableNFT",
              "label": "_tokenIdCounter",
              "type": "t_struct(Counter)6737_storage",
              "src": "contracts/DamnValuableNFT.sol:18"
            }
          ],
          "types": {
            "t_struct(Counter)6737_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableToken": {
        "src": "contracts/DamnValuableToken.sol:11",
        "version": {
          "withMetadata": "16e4ba7c6cbf51993f480b5ebdff9e12d229c552ef781dfd201a64b571ce59e0",
          "withoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c",
          "linkedWithoutMetadata": "97cd490dbbb20c4e2a235869ec83a44764c956271b3915fe3ce80d074681336c"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableToken",
            "src": "contracts/DamnValuableToken.sol:14"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DamnValuableTokenSnapshot": {
        "src": "contracts/DamnValuableTokenSnapshot.sol:11",
        "version": {
          "withMetadata": "cd3231824dcadfd825a6f15ab9ca24ea023c66eb9e6a39056770b6ab2e6ffa1a",
          "withoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891",
          "linkedWithoutMetadata": "b4d6504173761cb46f6dc0c4cbbd921d500529ada9bb39477be1cc294c6c5891"
        },
        "inherit": [
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256)",
          "snapshot()",
          "getBalanceAtLastSnapshot(address)",
          "getTotalSupplyAtLastSnapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DamnValuableTokenSnapshot",
            "src": "contracts/DamnValuableTokenSnapshot.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "DamnValuableTokenSnapshot",
              "label": "lastSnapshotId",
              "type": "t_uint256",
              "src": "contracts/DamnValuableTokenSnapshot.sol:13"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WalletRegistry": {
        "src": "contracts/backdoor/WalletRegistry.sol:16",
        "version": {
          "withMetadata": "e0bb6390824be72fdf72be7e10142bf9b7c4b365deba263e5d7a7ea87efa90c3",
          "withoutMetadata": "de91dd61291d84a4edad47232fab214f63d70e53239aa250915d6f2208ff974d",
          "linkedWithoutMetadata": "de91dd61291d84a4edad47232fab214f63d70e53239aa250915d6f2208ff974d"
        },
        "inherit": [
          "Ownable",
          "Context",
          "IProxyCreationCallback"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address[])",
          "addBeneficiary(address)",
          "proxyCreated(address,address,bytes,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WalletRegistry",
            "src": "contracts/backdoor/WalletRegistry.sol:31"
          },
          {
            "kind": "state-variable-immutable",
            "name": "masterCopy",
            "src": "contracts/backdoor/WalletRegistry.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "walletFactory",
            "src": "contracts/backdoor/WalletRegistry.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/backdoor/WalletRegistry.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WalletRegistry",
              "label": "beneficiaries",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/backdoor/WalletRegistry.sol:26"
            },
            {
              "contract": "WalletRegistry",
              "label": "wallets",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/backdoor/WalletRegistry.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ClimberTimelock": {
        "src": "contracts/climber/ClimberTimelock.sol:11",
        "version": {
          "withMetadata": "3147f89a59d0253324b6c00582e2ff5ef113f09192767fd26ccf81da1485a2c9",
          "withoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01",
          "linkedWithoutMetadata": "24c0a89abc12d225c79924c4cc3e76f1c4e303a12f93f70a11487a8490761a01"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "getOperationState(bytes32)",
          "getOperationId(address[],uint256[],bytes[],bytes32)",
          "schedule(address[],uint256[],bytes[],bytes32)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "updateDelay(uint64)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ClimberTimelock",
            "src": "contracts/climber/ClimberTimelock.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "delay",
            "src": "contracts/climber/ClimberTimelock.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ClimberTimelock",
              "label": "operations",
              "type": "t_mapping(t_bytes32,t_struct(Operation)8429_storage)",
              "src": "contracts/climber/ClimberTimelock.sol:33"
            },
            {
              "contract": "ClimberTimelock",
              "label": "delay",
              "type": "t_uint64",
              "src": "contracts/climber/ClimberTimelock.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(Operation)8429_storage)": {
              "label": "mapping(bytes32 => struct ClimberTimelock.Operation)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(Operation)8429_storage": {
              "label": "struct ClimberTimelock.Operation",
              "members": [
                {
                  "label": "readyAtTimestamp",
                  "type": "t_uint64"
                },
                {
                  "label": "known",
                  "type": "t_bool"
                },
                {
                  "label": "executed",
                  "type": "t_bool"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ClimberVault": {
        "src": "contracts/climber/ClimberVault.sol:16",
        "version": {
          "withMetadata": "0b9da415d3b23dfa0a24f553cb31d032f31d9d76d1f7c0a389c066b1257cc83b",
          "withoutMetadata": "ece21939478de1b774e10b4df05d2a765fb502a480737ccc104dab6fc7cf89f7",
          "linkedWithoutMetadata": "ece21939478de1b774e10b4df05d2a765fb502a480737ccc104dab6fc7cf89f7"
        },
        "inherit": [
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,address,address)",
          "withdraw(address,address,uint256)",
          "sweepFunds(address)",
          "getSweeper()",
          "getLastWithdrawalTimestamp()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ClimberVault",
              "label": "_lastWithdrawalTimestamp",
              "type": "t_uint256",
              "src": "contracts/climber/ClimberVault.sol:21"
            },
            {
              "contract": "ClimberVault",
              "label": "_sweeper",
              "type": "t_address",
              "src": "contracts/climber/ClimberVault.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Exchange": {
        "src": "contracts/compromised/Exchange.sol:14",
        "version": {
          "withMetadata": "55be64ef1fa7a152dba487d1f2bd609656a26f786c309cb342b7a699aeb865d5",
          "withoutMetadata": "7163ff2233602bd0f58c25d96ef532e9e527f04d66db0b274c2efbf1118de031",
          "linkedWithoutMetadata": "7163ff2233602bd0f58c25d96ef532e9e527f04d66db0b274c2efbf1118de031"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "buyOne()",
          "sellOne(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Exchange",
            "src": "contracts/compromised/Exchange.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/compromised/Exchange.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "oracle",
            "src": "contracts/compromised/Exchange.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TrustfulOracle": {
        "src": "contracts/compromised/TrustfulOracle.sol:13",
        "version": {
          "withMetadata": "d8570a697d5ce34f3479da4f20a60dbe7a22bc9d546a4df7be96c9c72e93468b",
          "withoutMetadata": "b50c184367833587542d4673d2f90c2142170767bc9ab32ed89989de63160c74",
          "linkedWithoutMetadata": "b50c184367833587542d4673d2f90c2142170767bc9ab32ed89989de63160c74"
        },
        "inherit": [
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],bool)",
          "setupInitialPrices(address[],string[],uint256[])",
          "postPrice(string,uint256)",
          "getMedianPrice(string)",
          "getAllPricesForSymbol(string)",
          "getPriceBySource(string,address)",
          "getNumberOfSources()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TrustfulOracle",
            "src": "contracts/compromised/TrustfulOracle.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TrustfulOracle",
              "label": "pricesBySource",
              "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))",
              "src": "contracts/compromised/TrustfulOracle.sol:19"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))": {
              "label": "mapping(address => mapping(string => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_string_memory_ptr,t_uint256)": {
              "label": "mapping(string => uint256)"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TrustfulOracleInitializer": {
        "src": "contracts/compromised/TrustfulOracleInitializer.sol:10",
        "version": {
          "withMetadata": "c9e4de91e9a731a923a5395e78c36217899fca42808cf76a75b5172ea2145259",
          "withoutMetadata": "a6cef083199dd093e95892dcb2c31637919d36a6c2a756052c2337f9660bd0de",
          "linkedWithoutMetadata": "a6cef083199dd093e95892dcb2c31637919d36a6c2a756052c2337f9660bd0de"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address[],string[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TrustfulOracleInitializer",
            "src": "contracts/compromised/TrustfulOracleInitializer.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TrustfulOracleInitializer",
              "label": "oracle",
              "type": "t_contract(TrustfulOracle)9612",
              "src": "contracts/compromised/TrustfulOracleInitializer.sol:14"
            }
          ],
          "types": {
            "t_contract(TrustfulOracle)9612": {
              "label": "contract TrustfulOracle"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderBuyer": {
        "src": "contracts/free-rider/FreeRiderBuyer.sol:13",
        "version": {
          "withMetadata": "a5ade1dd74b0f4e103ac1b1968bd1bec703a370b9bd2003424b2c5d99efef795",
          "withoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981",
          "linkedWithoutMetadata": "2297db1005e4630b2677bc94c3d0dadaca087d5a55b5dca32f1477ba6a88b981"
        },
        "inherit": [
          "IERC721Receiver",
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderBuyer",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "partner",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "nft",
            "src": "contracts/free-rider/FreeRiderBuyer.sol:17"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderBuyer",
              "label": "received",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderBuyer.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FreeRiderNFTMarketplace": {
        "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:12",
        "version": {
          "withMetadata": "bd32ecc30caca17d79dc7d7738d1c2dcfcbfff7cbacf5f498f42d48692ad5f17",
          "withoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7",
          "linkedWithoutMetadata": "16ce852d569e829511a42599c780c86724b0cdad533183a7cf16d76f4af82bf7"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(uint8)",
          "offerMany(uint256[],uint256[])",
          "buyMany(uint256[])",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FreeRiderNFTMarketplace",
            "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "token",
              "type": "t_contract(DamnValuableNFT)8064",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:16"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "amountOfOffers",
              "type": "t_uint256",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:17"
            },
            {
              "contract": "FreeRiderNFTMarketplace",
              "label": "offers",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/free-rider/FreeRiderNFTMarketplace.sol:20"
            }
          ],
          "types": {
            "t_contract(DamnValuableNFT)8064": {
              "label": "contract DamnValuableNFT"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanReceiver": {
        "src": "contracts/naive-receiver/FlashLoanReceiver.sol:11",
        "version": {
          "withMetadata": "5038dfc5ec90b0f00429508a2ece46f9f262036b5749cf2751c97de58363e64e",
          "withoutMetadata": "eda2acb314ef96f1575c2b0a5c6a4fe71a44c771b7eb20f1a203d31f8f0ebbd4",
          "linkedWithoutMetadata": "eda2acb314ef96f1575c2b0a5c6a4fe71a44c771b7eb20f1a203d31f8f0ebbd4"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address payable)",
          "receiveEther(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanReceiver",
            "src": "contracts/naive-receiver/FlashLoanReceiver.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FlashLoanReceiver",
              "label": "pool",
              "type": "t_address_payable",
              "src": "contracts/naive-receiver/FlashLoanReceiver.sol:14"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "NaiveReceiverLenderPool": {
        "src": "contracts/naive-receiver/NaiveReceiverLenderPool.sol:11",
        "version": {
          "withMetadata": "41b1128e13ec39292d5e8015af40843c0d87ef6f01c70f4257f2bbbaa82be20e",
          "withoutMetadata": "e3fcc399d03b4426592c0bd4b54aee44fc6b78b93ec7671dd3d44a5e9c84e3fe",
          "linkedWithoutMetadata": "e3fcc399d03b4426592c0bd4b54aee44fc6b78b93ec7671dd3d44a5e9c84e3fe"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "fixedFee()",
          "flashLoan(address,uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PuppetPool": {
        "src": "contracts/puppet/PuppetPool.sol:12",
        "version": {
          "withMetadata": "8b7e826dc25f59d69545cd1fda060881b6f7cc697419fa53a3dc6e943eb628f4",
          "withoutMetadata": "c458cb98d921890173e6e80ec045a3e4059a55f6109f0955d006d0aa751a728b",
          "linkedWithoutMetadata": "c458cb98d921890173e6e80ec045a3e4059a55f6109f0955d006d0aa751a728b"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "borrow(uint256)",
          "calculateDepositRequired(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PuppetPool",
            "src": "contracts/puppet/PuppetPool.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "uniswapPair",
            "src": "contracts/puppet/PuppetPool.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/puppet/PuppetPool.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PuppetPool",
              "label": "deposits",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/puppet/PuppetPool.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SelfiePool": {
        "src": "contracts/selfie/SelfiePool.sol:13",
        "version": {
          "withMetadata": "256d8c3825c9cea93f5116dbfc19dec8f82bf96b7ef20beddba9e2b183304386",
          "withoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343",
          "linkedWithoutMetadata": "0e9a7cad12b584c83d038724cd5e54eb404312809bca56f9e10631909933b343"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address)",
          "flashLoan(uint256)",
          "drainAllFunds(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SelfiePool",
            "src": "contracts/selfie/SelfiePool.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SelfiePool",
              "label": "token",
              "type": "t_contract(ERC20Snapshot)5295",
              "src": "contracts/selfie/SelfiePool.sol:17"
            },
            {
              "contract": "SelfiePool",
              "label": "governance",
              "type": "t_contract(SimpleGovernance)10809",
              "src": "contracts/selfie/SelfiePool.sol:18"
            }
          ],
          "types": {
            "t_contract(ERC20Snapshot)5295": {
              "label": "contract ERC20Snapshot"
            },
            "t_contract(SimpleGovernance)10809": {
              "label": "contract SimpleGovernance"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SimpleGovernance": {
        "src": "contracts/selfie/SimpleGovernance.sol:11",
        "version": {
          "withMetadata": "fce5e3945b2c6d67d0d048ab0e3a3f0924072856db29f32ac2f8bacc99da224f",
          "withoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32",
          "linkedWithoutMetadata": "615fb90d2e5c3877d776957908be4fb908a97afae4eba4f272bf27a5c69fad32"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "queueAction(address,bytes,uint256)",
          "executeAction(uint256)",
          "getActionDelay()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SimpleGovernance",
            "src": "contracts/selfie/SimpleGovernance.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "ACTION_DELAY_IN_SECONDS",
            "src": "contracts/selfie/SimpleGovernance.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SimpleGovernance",
              "label": "governanceToken",
              "type": "t_contract(DamnValuableTokenSnapshot)8150",
              "src": "contracts/selfie/SimpleGovernance.sol:23"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actions",
              "type": "t_mapping(t_uint256,t_struct(GovernanceAction)10570_storage)",
              "src": "contracts/selfie/SimpleGovernance.sol:25"
            },
            {
              "contract": "SimpleGovernance",
              "label": "actionCounter",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:26"
            },
            {
              "contract": "SimpleGovernance",
              "label": "ACTION_DELAY_IN_SECONDS",
              "type": "t_uint256",
              "src": "contracts/selfie/SimpleGovernance.sol:27"
            }
          ],
          "types": {
            "t_contract(DamnValuableTokenSnapshot)8150": {
              "label": "contract DamnValuableTokenSnapshot"
            },
            "t_mapping(t_uint256,t_struct(GovernanceAction)10570_storage)": {
              "label": "mapping(uint256 => struct SimpleGovernance.GovernanceAction)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(GovernanceAction)10570_storage": {
              "label": "struct SimpleGovernance.GovernanceAction",
              "members": [
                {
                  "label": "receiver",
                  "type": "t_address"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage"
                },
                {
                  "label": "weiAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "proposedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "executedAt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_bytes_storage": {
              "label": "bytes"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IFlashLoanEtherReceiver": {
        "src": "contracts/side-entrance/SideEntranceLenderPool.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "execute()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SideEntranceLenderPool": {
        "src": "contracts/side-entrance/SideEntranceLenderPool.sol:14",
        "version": {
          "withMetadata": "0f58724bab13e393b3b428e9934de71b285da05d7746883db19be1a5d2ec6d43",
          "withoutMetadata": "20941c44e7cc77530e1a7bbced60cbd6f87f66931dfb206f0fdeea6a4bb1dae5",
          "linkedWithoutMetadata": "20941c44e7cc77530e1a7bbced60cbd6f87f66931dfb206f0fdeea6a4bb1dae5"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [
          "deposit()",
          "withdraw()",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SideEntranceLenderPool",
              "label": "balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/side-entrance/SideEntranceLenderPool.sol:17"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccountingToken": {
        "src": "contracts/the-rewarder/AccountingToken.sol:14",
        "version": {
          "withMetadata": "1db32f5dc4d6f0feebca382b09835b70403ff6ca8541c58185d5215a21faa6dc",
          "withoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43",
          "linkedWithoutMetadata": "62838537800d5284198d9337a7ef73af500c51b8c16c2701cae1adb4ff510e43"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Snapshot",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "snapshot()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "AccountingToken",
            "src": "contracts/the-rewarder/AccountingToken.sol:20"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FlashLoanerPool": {
        "src": "contracts/the-rewarder/FlashLoanerPool.sol:15",
        "version": {
          "withMetadata": "6735b2a30efd0b49dfb4c756674081d30b81217933266201195272cb67b44046",
          "withoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89",
          "linkedWithoutMetadata": "f70b035ffb1ed2c1d9a94180aeb4ff605001ee11fc536ab1e64fd8f3f0bd3a89"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FlashLoanerPool",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/FlashLoanerPool.sol:19"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "RewardToken": {
        "src": "contracts/the-rewarder/RewardToken.sol:13",
        "version": {
          "withMetadata": "b2ac7a1fd5f1be5ac87e8462cbf715b25cbd3b2633dd639683524e03f5ce1ce4",
          "withoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108",
          "linkedWithoutMetadata": "1c43d79d0c5183ad3b7a1124aa82702fe117ea4c50fb910bb8278f00540e8108"
        },
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "RewardToken",
            "src": "contracts/the-rewarder/RewardToken.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TheRewarderPool": {
        "src": "contracts/the-rewarder/TheRewarderPool.sol:14",
        "version": {
          "withMetadata": "14cc63fb8d7fd41254c410cffab9a58bb527e6f7296ff8a63559abd05ebced82",
          "withoutMetadata": "99512dfa164af78b5a5db313e22a4cb18d4e166619f4453b2be55f207f1e544b",
          "linkedWithoutMetadata": "99512dfa164af78b5a5db313e22a4cb18d4e166619f4453b2be55f207f1e544b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "distributeRewards()",
          "isNewRewardsRound()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TheRewarderPool",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "liquidityToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:25"
          },
          {
            "kind": "state-variable-immutable",
            "name": "rewardToken",
            "src": "contracts/the-rewarder/TheRewarderPool.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "TheRewarderPool",
              "label": "lastSnapshotIdForRewards",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:19"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRecordedSnapshotTimestamp",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:20"
            },
            {
              "contract": "TheRewarderPool",
              "label": "lastRewardTimestamps",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:22"
            },
            {
              "contract": "TheRewarderPool",
              "label": "accToken",
              "type": "t_contract(AccountingToken)11054",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:29"
            },
            {
              "contract": "TheRewarderPool",
              "label": "roundNumber",
              "type": "t_uint256",
              "src": "contracts/the-rewarder/TheRewarderPool.sol:35"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_contract(AccountingToken)11054": {
              "label": "contract AccountingToken"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "TrusterLenderPool": {
        "src": "contracts/truster/TrusterLenderPool.sol:13",
        "version": {
          "withMetadata": "3be283a6a298984b7e4340752741068c1fe43437b20804a51fb4e183474fa121",
          "withoutMetadata": "95227288aa34f4deb903bfee9b67b506e926ba88b5a78fdbe5dc493e99fa2c1d",
          "linkedWithoutMetadata": "95227288aa34f4deb903bfee9b67b506e926ba88b5a78fdbe5dc493e99fa2c1d"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address)",
          "flashLoan(uint256,address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TrusterLenderPool",
            "src": "contracts/truster/TrusterLenderPool.sol:19"
          },
          {
            "kind": "state-variable-immutable",
            "name": "damnValuableToken",
            "src": "contracts/truster/TrusterLenderPool.sol:17"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReceiverUnstoppable": {
        "src": "contracts/unstoppable/ReceiverUnstoppable.sol:12",
        "version": {
          "withMetadata": "8c8e943df275f3a0dc71f51cc3e7f81801c5a5ad3f7a8c6c46ec7caaa3e455eb",
          "withoutMetadata": "cc9ef31dca2dd4eda9bd9d018fcbef9508a90dec52cc0c4972ddd3519dfa12b7",
          "linkedWithoutMetadata": "cc9ef31dca2dd4eda9bd9d018fcbef9508a90dec52cc0c4972ddd3519dfa12b7"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "receiveTokens(address,uint256)",
          "executeFlashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReceiverUnstoppable",
            "src": "contracts/unstoppable/ReceiverUnstoppable.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "pool",
            "src": "contracts/unstoppable/ReceiverUnstoppable.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "owner",
            "src": "contracts/unstoppable/ReceiverUnstoppable.sol:15"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IReceiver": {
        "src": "contracts/unstoppable/UnstoppableLender.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "receiveTokens(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UnstoppableLender": {
        "src": "contracts/unstoppable/UnstoppableLender.sol:16",
        "version": {
          "withMetadata": "274a2d8f20bc11fa02d9ab7bf1d70b2c86e477638b22210d7f1b96819f8c64a2",
          "withoutMetadata": "6f3b3aaf717751b179662a61c811d716a67af4effcde5710c6863dba72c1f298",
          "linkedWithoutMetadata": "6f3b3aaf717751b179662a61c811d716a67af4effcde5710c6863dba72c1f298"
        },
        "inherit": [
          "ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "depositTokens(uint256)",
          "flashLoan(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UnstoppableLender",
            "src": "contracts/unstoppable/UnstoppableLender.sol:21"
          },
          {
            "kind": "state-variable-immutable",
            "name": "damnValuableToken",
            "src": "contracts/unstoppable/UnstoppableLender.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UnstoppableLender",
              "label": "poolBalance",
              "type": "t_uint256",
              "src": "contracts/unstoppable/UnstoppableLender.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "WETH9": {
        "src": "contracts/WETH9.sol:24",
        "version": {
          "withMetadata": "9ff0f71e0daab89dd19425bad249ed6485375c9df3d8e8268d573b54caeca51c",
          "withoutMetadata": "7a018d70f3a9341fbb9c90cbb0227fa08c546db996b1df35d99fccc036fe5f82",
          "linkedWithoutMetadata": "7a018d70f3a9341fbb9c90cbb0227fa08c546db996b1df35d99fccc036fe5f82"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts/WETH9.sol:25"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts/WETH9.sol:26"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts/WETH9.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETH9",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/WETH9.sol:25"
            },
            {
              "contract": "WETH9",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts/WETH9.sol:26"
            },
            {
              "contract": "WETH9",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts/WETH9.sol:27"
            },
            {
              "contract": "WETH9",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/WETH9.sol:34"
            },
            {
              "contract": "WETH9",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/WETH9.sol:35"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "IUniswapV2Pair": {
        "src": "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@uniswap/v2-periphery/contracts/libraries/SafeMath.sol:5",
        "version": {
          "withMetadata": "16e8a68b6d097b1ac66147cf528304330e10aedb79b4c6d240572094955f8f64",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "@uniswap/v2-periphery/contracts/libraries/UniswapV2Library.sol:7",
        "version": {
          "withMetadata": "3feb8fd8aefdbb41506624b645202e56724643b28af4b49267506bfc5009d5f8",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts/puppet-v2/PuppetV2Pool.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "balanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PuppetV2Pool": {
        "src": "contracts/puppet-v2/PuppetV2Pool.sol:17",
        "version": {
          "withMetadata": "67c1bf7ae02a81bb03ca0039748a0719bad7324e9b48a8e4ebcde00709b9fcfb",
          "withoutMetadata": "f7eaf8582b8d3fabb94d07f9fe9294675627d098d049ab764846665b414706ed",
          "linkedWithoutMetadata": "f7eaf8582b8d3fabb94d07f9fe9294675627d098d049ab764846665b414706ed"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "UniswapV2Library"
        ],
        "methods": [
          "(address,address,address,address)",
          "borrow(uint256)",
          "calculateDepositOfWETHRequired(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PuppetV2Pool",
            "src": "contracts/puppet-v2/PuppetV2Pool.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PuppetV2Pool",
              "label": "_uniswapPair",
              "type": "t_address",
              "src": "contracts/puppet-v2/PuppetV2Pool.sol:20"
            },
            {
              "contract": "PuppetV2Pool",
              "label": "_uniswapFactory",
              "type": "t_address",
              "src": "contracts/puppet-v2/PuppetV2Pool.sol:21"
            },
            {
              "contract": "PuppetV2Pool",
              "label": "_token",
              "type": "t_contract(IERC20)820",
              "src": "contracts/puppet-v2/PuppetV2Pool.sol:22"
            },
            {
              "contract": "PuppetV2Pool",
              "label": "_weth",
              "type": "t_contract(IERC20)820",
              "src": "contracts/puppet-v2/PuppetV2Pool.sol:23"
            },
            {
              "contract": "PuppetV2Pool",
              "label": "deposits",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/puppet-v2/PuppetV2Pool.sol:25"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(IERC20)820": {
              "label": "contract IERC20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}